{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nexport const ACTIONS = {\n  NOTIFY: 'NOTIFY',\n  AUTH: 'AUTH',\n  ADD_CART: 'ADD_CART',\n  ADD_MODAL: 'ADD_MODAL',\n  ADD_ORDERS: 'ADD_ORDERS',\n  ADD_USERS: 'ADD_USERS',\n  ADD_CATEGORIES: 'ADD_CATEGORIES'\n};\nexport const addToCart = (product, cart) => {\n  if (product.inStock === 0) return {\n    type: 'NOTIFY',\n    payload: {\n      error: 'This product is out of stock.'\n    }\n  };\n  const check = cart.every(item => {\n    return item._id !== product._id;\n  });\n  if (!check) return {\n    type: 'NOTIFY',\n    payload: {\n      error: 'The product has been added to cart.'\n    }\n  };\n  return {\n    type: 'ADD_CART',\n    payload: [...cart, _objectSpread(_objectSpread({}, product), {}, {\n      quantity: 1\n    })]\n  };\n};\nexport const decrease = (data, id) => {\n  const newData = [...data];\n  newData.forEach(item => {\n    if (item._id === id) item.quantity -= 1;\n  });\n  return {\n    type: 'ADD_CART',\n    payload: newData\n  };\n};\nexport const increase = (data, id) => {\n  const newData = [...data];\n  newData.forEach(item => {\n    if (item._id === id) item.quantity += 1;\n  });\n  return {\n    type: 'ADD_CART',\n    payload: newData\n  };\n};\nexport const deleteItem = (data, id, type) => {\n  const newData = data.filter(item => item._id !== id);\n  return {\n    type,\n    payload: newData\n  };\n};\nexport const updateItem = (data, id, post, type) => {\n  const newData = data.map(item => item._id === id ? post : item);\n  return {\n    type,\n    payload: newData\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
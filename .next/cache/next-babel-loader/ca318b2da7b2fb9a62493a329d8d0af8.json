{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await uploadInfor(req, res);\n      break;\n    case \"GET\":\n      await getUsers(req, res);\n      break;\n  }\n};\nconst getUsers = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid\"\n    });\n    const users = await Users.find().select('-password');\n    res.json({\n      users\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst uploadInfor = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      name,\n      avatar\n    } = req.body;\n    const newUser = await Users.findOneAndUpdate({\n      _id: result.id\n    }, {\n      name,\n      avatar\n    });\n    res.json({\n      msg: \"Update Success!\",\n      user: {\n        name,\n        avatar,\n        email: newUser.email,\n        role: newUser.role\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var ACTIONS = {\n  NOTIFY: 'NOTIFY',\n  AUTH: 'AUTH',\n  ADD_CART: 'ADD_CART',\n  ADD_MODAL: 'ADD_MODAL',\n  ADD_ORDERS: 'ADD_ORDERS',\n  ADD_USERS: 'ADD_USERS',\n  ADD_CATEGORIES: 'ADD_CATEGORIES'\n};\nexport var addToCart = function addToCart(product, cart) {\n  if (product.inStock === 0) return {\n    type: 'NOTIFY',\n    payload: {\n      error: 'This product is out of stock.'\n    }\n  };\n  var check = cart.every(function (item) {\n    return item._id !== product._id;\n  });\n  if (!check) return {\n    type: 'NOTIFY',\n    payload: {\n      error: 'The product has been added to cart.'\n    }\n  };\n  return {\n    type: 'ADD_CART',\n    payload: [].concat(_toConsumableArray(cart), [_objectSpread(_objectSpread({}, product), {}, {\n      quantity: 1\n    })])\n  };\n};\nexport var decrease = function decrease(data, id) {\n  var newData = _toConsumableArray(data);\n  newData.forEach(function (item) {\n    if (item._id === id) item.quantity -= 1;\n  });\n  return {\n    type: 'ADD_CART',\n    payload: newData\n  };\n};\nexport var increase = function increase(data, id) {\n  var newData = _toConsumableArray(data);\n  newData.forEach(function (item) {\n    if (item._id === id) item.quantity += 1;\n  });\n  return {\n    type: 'ADD_CART',\n    payload: newData\n  };\n};\nexport var deleteItem = function deleteItem(data, id, type) {\n  var newData = data.filter(function (item) {\n    return item._id !== id;\n  });\n  return {\n    type: type,\n    payload: newData\n  };\n};\nexport var updateItem = function updateItem(data, id, post, type) {\n  var newData = data.map(function (item) {\n    return item._id === id ? post : item;\n  });\n  return {\n    type: type,\n    payload: newData\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport connectDB from '../../../utils/connectDB';\nimport Categories from '../../../models/categoriesModel';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"PUT\":\n      await updateCategory(req, res);\n      break;\n    case \"DELETE\":\n      await deleteCategory(req, res);\n      break;\n  }\n};\nconst updateCategory = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid.\"\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      name\n    } = req.body;\n    const newCategory = await Categories.findOneAndUpdate({\n      _id: id\n    }, {\n      name\n    });\n    res.json({\n      msg: \"Success! Update a new category\",\n      category: _objectSpread(_objectSpread({}, newCategory._doc), {}, {\n        name\n      })\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst deleteCategory = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: \"Authentication is not valid.\"\n    });\n    const {\n      id\n    } = req.query;\n    const products = await Products.findOne({\n      category: id\n    });\n    if (products) return res.status(400).json({\n      err: \"Please delete all products with a relationship\"\n    });\n    await Categories.findByIdAndDelete(id);\n    res.json({\n      msg: \"Success! Deleted a category\"\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
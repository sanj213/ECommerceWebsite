{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useEffect, useRef, useContext } from 'react';\nimport { patchData } from '../utils/fetchData';\nimport { DataContext } from '../store/GlobalState';\nimport { updateItem } from '../store/Actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar PaypalBtn = function PaypalBtn(_ref) {\n  var order = _ref.order,\n    onPaymentSuccess = _ref.onPaymentSuccess;\n  var refPaypalBtn = useRef();\n  var _useContext = useContext(DataContext),\n    state = _useContext.state,\n    dispatch = _useContext.dispatch;\n  var auth = state.auth,\n    orders = state.orders;\n  useEffect(function () {\n    paypal.Buttons({\n      createOrder: function createOrder(data, actions) {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              value: order.total\n            }\n          }]\n        });\n      },\n      onApprove: function onApprove(data, actions) {\n        dispatch({\n          type: 'NOTIFY',\n          payload: {\n            loading: true\n          }\n        });\n        return actions.order.capture().then(function (details) {\n          patchData(\"order/payment/\".concat(order._id), {\n            paymentId: details.payer.payer_id\n          }, auth.token).then(function (res) {\n            if (res.err) return dispatch({\n              type: 'NOTIFY',\n              payload: {\n                error: res.err\n              }\n            });\n            dispatch(updateItem(orders, order._id, _objectSpread(_objectSpread({}, order), {}, {\n              paid: true,\n              dateOfPayment: details.create_time,\n              paymentId: details.payer.payer_id,\n              method: 'Paypal'\n            }), 'ADD_ORDERS'));\n            dispatch({\n              type: 'NOTIFY',\n              payload: {\n                success: res.msg\n              }\n            });\n\n            // Call the onPaymentSuccess callback\n            onPaymentSuccess();\n          });\n        });\n      }\n    }).render(refPaypalBtn.current);\n  }, []);\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: refPaypalBtn\n  });\n};\nexport default PaypalBtn;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await updateRole(req, res);\n      break;\n    case \"DELETE\":\n      await deleteUser(req, res);\n      break;\n  }\n};\nconst updateRole = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin' || !result.root) return res.status(400).json({\n      err: \"Authentication is not valid\"\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      role\n    } = req.body;\n    await Users.findOneAndUpdate({\n      _id: id\n    }, {\n      role\n    });\n    res.json({\n      msg: 'Update Success!'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst deleteUser = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin' || !result.root) return res.status(400).json({\n      err: \"Authentication is not valid\"\n    });\n    const {\n      id\n    } = req.query;\n    await Users.findByIdAndDelete(id);\n    res.json({\n      msg: 'Deleted Success!'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
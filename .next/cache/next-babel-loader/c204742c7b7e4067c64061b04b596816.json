{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport jwt from 'jsonwebtoken';\nimport { createAccessToken } from '../../../utils/generateToken';\nconnectDB();\nexport default async (req, res) => {\n  try {\n    const rf_token = req.cookies.refreshtoken;\n    if (!rf_token) return res.status(400).json({\n      err: 'Please login now!'\n    });\n    const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET);\n    if (!result) return res.status(400).json({\n      err: 'Your token is incorrect or has expired.'\n    });\n    const user = await Users.findById(result.id);\n    if (!user) return res.status(400).json({\n      err: 'User does not exist.'\n    });\n    const access_token = createAccessToken({\n      id: user._id\n    });\n    res.json({\n      access_token,\n      user: {\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        avatar: user.avatar,\n        root: user.root\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Users","jwt","createAccessToken","req","res","rf_token","cookies","refreshtoken","status","json","err","result","verify","process","env","REFRESH_TOKEN_SECRET","user","findById","id","access_token","_id","name","email","role","avatar","root","message"],"sources":["/Users/sanjanaa/Documents/UrbanBasket/pages/api/auth/accessToken.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Users from '../../../models/userModel'\nimport jwt from 'jsonwebtoken'\nimport { createAccessToken } from '../../../utils/generateToken'\n\nconnectDB()\n\nexport default async (req, res) => {\n    try{\n        const rf_token = req.cookies.refreshtoken;\n        if(!rf_token) return res.status(400).json({err: 'Please login now!'})\n\n        const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET)\n        if(!result) return res.status(400).json({err: 'Your token is incorrect or has expired.'})\n\n        const user = await Users.findById(result.id)\n        if(!user) return res.status(400).json({err: 'User does not exist.'})\n\n        const access_token = createAccessToken({id: user._id})\n        res.json({\n            access_token,\n            user: {\n                name: user.name,\n                email: user.email,\n                role: user.role,\n                avatar: user.avatar,\n                root: user.root\n            }\n        })\n    }catch(err){\n        return res.status(500).json({err: err.message})\n    }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,0BAA0B;AAChD,OAAOC,KAAK,MAAM,2BAA2B;AAC7C,OAAOC,GAAG,MAAM,cAAc;AAC9B,SAASC,iBAAiB,QAAQ,8BAA8B;AAEhEH,SAAS,CAAC,CAAC;AAEX,eAAe,OAAOI,GAAG,EAAEC,GAAG,KAAK;EAC/B,IAAG;IACC,MAAMC,QAAQ,GAAGF,GAAG,CAACG,OAAO,CAACC,YAAY;IACzC,IAAG,CAACF,QAAQ,EAAE,OAAOD,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAAmB,CAAC,CAAC;IAErE,MAAMC,MAAM,GAAGV,GAAG,CAACW,MAAM,CAACP,QAAQ,EAAEQ,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAAC;IACrE,IAAG,CAACJ,MAAM,EAAE,OAAOP,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAAyC,CAAC,CAAC;IAEzF,MAAMM,IAAI,GAAG,MAAMhB,KAAK,CAACiB,QAAQ,CAACN,MAAM,CAACO,EAAE,CAAC;IAC5C,IAAG,CAACF,IAAI,EAAE,OAAOZ,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAAsB,CAAC,CAAC;IAEpE,MAAMS,YAAY,GAAGjB,iBAAiB,CAAC;MAACgB,EAAE,EAAEF,IAAI,CAACI;IAAG,CAAC,CAAC;IACtDhB,GAAG,CAACK,IAAI,CAAC;MACLU,YAAY;MACZH,IAAI,EAAE;QACFK,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,KAAK,EAAEN,IAAI,CAACM,KAAK;QACjBC,IAAI,EAAEP,IAAI,CAACO,IAAI;QACfC,MAAM,EAAER,IAAI,CAACQ,MAAM;QACnBC,IAAI,EAAET,IAAI,CAACS;MACf;IACJ,CAAC,CAAC;EACN,CAAC,QAAMf,GAAG,EAAC;IACP,OAAON,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACgB;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
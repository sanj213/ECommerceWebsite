{"ast":null,"code":"import connectDB from '../../../../utils/connectDB';\nimport Orders from '../../../../models/orderModel';\nimport auth from '../../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await deliveredOrder(req, res);\n      break;\n  }\n};\nconst deliveredOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    const order = await Orders.findOne({\n      _id: id\n    });\n    if (order.paid) {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: order.dateOfPayment,\n          method: order.method,\n          delivered: true\n        }\n      });\n    } else {\n      await Orders.findOneAndUpdate({\n        _id: id\n      }, {\n        paid: true,\n        dateOfPayment: new Date().toISOString(),\n        method: 'Receive Cash',\n        delivered: true\n      });\n      res.json({\n        msg: 'Updated success!',\n        result: {\n          paid: true,\n          dateOfPayment: new Date().toISOString(),\n          method: 'Receive Cash',\n          delivered: true\n        }\n      });\n    }\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
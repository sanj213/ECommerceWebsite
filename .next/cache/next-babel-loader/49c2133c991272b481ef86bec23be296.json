{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.addLocale = addLocale;\nexports.delLocale = delLocale;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.interpolateAs = interpolateAs;\nexports.resolveHref = resolveHref;\nexports.markLoadingError = markLoadingError;\nexports.default = void 0;\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\nvar _denormalizePagePath = require(\"../../server/denormalize-page-path\");\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\nvar _utils = require(\"../utils\");\nvar _isDynamic = require(\"./utils/is-dynamic\");\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\nvar _querystring = require(\"./utils/querystring\");\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\nvar _routeMatcher = require(\"./utils/route-matcher\");\nvar _routeRegex = require(\"./utils/route-regex\");\nvar _escapePathDelimiters = _interopRequireDefault(require(\"./utils/escape-path-delimiters\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} /* global __NEXT_DATA__ */ // tslint:disable:no-console\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\nfunction addPathPrefix(path, prefix) {\n  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : `${prefix}${path}` : path;\n}\nfunction addLocale(path, locale, defaultLocale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale && locale !== defaultLocale && !path.startsWith('/' + locale + '/') && path !== '/' + locale ? addPathPrefix(path, '/' + locale) : path;\n  }\n  return path;\n}\nfunction delLocale(path, locale) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale && (path.startsWith('/' + locale + '/') || path === '/' + locale) ? path.substr(locale.length + 1) || '/' : path;\n  }\n  return path;\n}\nfunction hasBasePath(path) {\n  return path === basePath || path.startsWith(basePath + '/');\n}\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath);\n}\nfunction delBasePath(path) {\n  return path.slice(basePath.length) || '/';\n} /**\n  * Detects whether a given url is routable by the Next.js router (browser only).\n  */\nfunction isLocalURL(url) {\n  if (url.startsWith('/')) return true;\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils.getLocationOrigin)();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\nfunction interpolateAs(route, asPathname, query) {\n  let interpolatedRoute = '';\n  const dynamicRegex = (0, _routeRegex.getRouteRegex)(route);\n  const dynamicGroups = dynamicRegex.groups;\n  const dynamicMatches =\n  // Try to match the dynamic route against the asPath\n  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') ||\n  // Fall back to reading the values from the href\n  // TODO: should this take priority; also need to change in the router.\n  query;\n  interpolatedRoute = route;\n  const params = Object.keys(dynamicGroups);\n  if (!params.every(param => {\n    let value = dynamicMatches[param] || '';\n    const {\n      repeat,\n      optional\n    } = dynamicGroups[param]; // support single-level catch-all\n    // TODO: more robust handling for user-error (passing `/`)\n    let replaced = `[${repeat ? '...' : ''}${param}]`;\n    if (optional) {\n      replaced = `${!value ? '/' : ''}[${replaced}]`;\n    }\n    if (repeat && !Array.isArray(value)) value = [value];\n    return (optional || param in dynamicMatches) && (\n    // Interpolate group into data URL if present\n    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map(_escapePathDelimiters.default).join('/') : (0, _escapePathDelimiters.default)(value)) || '/');\n  })) {\n    interpolatedRoute = ''; // did not satisfy all requirements\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute\n  };\n}\nfunction omitParmsFromQuery(query, params) {\n  const filteredQuery = {};\n  Object.keys(query).forEach(key => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key];\n    }\n  });\n  return filteredQuery;\n} /**\n  * Resolves a given hyperlink with a certain router state (basePath not included).\n  * Preserves absolute urls.\n  */\nfunction resolveHref(currentPath, href, resolveAs) {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n');\n  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);\n    let interpolatedAs = '';\n    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {\n      const query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);\n      const {\n        result,\n        params\n      } = interpolateAs(finalUrl.pathname, finalUrl.pathname, query);\n      if (result) {\n        interpolatedAs = (0, _utils.formatWithValidation)({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params)\n        });\n      }\n    } // if the origin didn't change, it means we received a relative href\n    const resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;\n  } catch (_) {\n    return resolveAs ? [urlAsString] : urlAsString;\n  }\n}\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');\nfunction markLoadingError(err) {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});\n}\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as\n  };\n}\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && false && 'scrollRestoration' in window.history;\nconst SSG_DATA_NOT_FOUND_ERROR = 'SSG Data NOT_FOUND';\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n      if (res.status === 404) {\n        // TODO: handle reloading in development from fallback returning 200\n        // to on-demand-entry-handler causing it to reload periodically\n        throw new Error(SSG_DATA_NOT_FOUND_ERROR);\n      }\n      throw new Error(`Failed to load static props`);\n    }\n    return res.json();\n  });\n}\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err);\n    }\n    throw err;\n  });\n}\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */ // Static Data Cache\n  constructor(_pathname, _query, _as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    initialStyleSheets,\n    err,\n    subscription,\n    isFallback,\n    locale,\n    locales,\n    defaultLocale\n  }) {\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n    this.locale = void 0;\n    this.locales = void 0;\n    this.defaultLocale = void 0;\n    this.onPopState = e => {\n      const state = e.state;\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n      if (!state.__N) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = state;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale\n      }));\n    }; // represents the current component key\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [/* /_app does not need its stylesheets managed */]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale;\n      this.locales = locales;\n      this.defaultLocale = defaultLocale;\n    }\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)());\n      }\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n          let scrollDebounceTimeout;\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout);\n            scrollDebounceTimeout = setTimeout(() => {\n              const {\n                url,\n                as: curAs,\n                options\n              } = history.state;\n              this.changeState('replaceState', url, curAs, Object.assign({}, options, {\n                _N_X: window.scrollX,\n                _N_Y: window.scrollY\n              }));\n            }, 10);\n          };\n          window.addEventListener('scroll', debouncedScrollSave);\n        }\n      }\n    }\n  }\n  reload() {\n    window.location.reload();\n  } /**\n    * Go back in history\n    */\n  back() {\n    window.history.back();\n  } /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  push(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  } /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  replace(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n  async change(method, url, as, options) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = options.locale || this.locale;\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale;\n      }\n      const {\n        normalizeLocalePath\n      } = require('../i18n/normalize-locale-path');\n      const localePathResult = normalizeLocalePath(as, this.locales);\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale;\n        url = localePathResult.pathname;\n      }\n    }\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute);\n    }\n    as = addLocale(as, options.locale, this.defaultLocale);\n    const cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);\n    this._inFlightRoute = as; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!options._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as); // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route]);\n      Router.events.emit('hashChangeComplete', as);\n      return true;\n    } // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    const pages = await this.pageLoader.getPageList();\n    const {\n      __rewrites: rewrites\n    } = await this.pageLoader.promisedBuildManifest;\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname,\n      query\n    } = parsed;\n    parsed = this._resolveHref(parsed, pages);\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    } // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState';\n    }\n    let route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    const {\n      shallow = false\n    } = options; // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as;\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = (0, _resolveRewrites.default)((0, _parseRelativeUrl.parseRelativeUrl)(as).pathname, pages, basePath, rewrites, query, p => this._resolveHref({\n        pathname: p\n      }, pages).pathname);\n      if (resolvedAs !== as) {\n        const potentialHref = (0, _normalizeTrailingSlash.removePathTrailingSlash)(this._resolveHref(Object.assign({}, parsed, {\n          pathname: resolvedAs\n        }), pages, false).pathname); // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        if (pages.includes(potentialHref)) {\n          route = potentialHref;\n          pathname = potentialHref;\n          parsed.pathname = pathname;\n          url = (0, _utils.formatWithValidation)(parsed);\n        }\n      }\n    }\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);\n    if ((0, _isDynamic.isDynamicRoute)(route)) {\n      const parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n      const asPathname = parsedAs.pathname;\n      const routeRegex = (0, _routeRegex.getRouteRegex)(route);\n      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n      const shouldInterpolate = route === asPathname;\n      const interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};\n      if (!routeMatch || shouldInterpolate && !interpolatedAs.result) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`${shouldInterpolate ? `Interpolating href` : `Mismatching \\`as\\` and \\`href\\``} failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n          throw new Error((shouldInterpolate ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(', ')}) to be interpolated properly. ` : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) + `Read more: https://err.sh/vercel/next.js/${shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'}`);\n        }\n      } else if (shouldInterpolate) {\n        as = (0, _utils.formatWithValidation)(Object.assign({}, parsedAs, {\n          pathname: interpolatedAs.result,\n          query: omitParmsFromQuery(query, interpolatedAs.params)\n        }));\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n    Router.events.emit('routeChangeStart', as);\n    try {\n      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);\n      let {\n        error,\n        props,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo; // handle redirect on client-transition\n      if ((__N_SSG || __N_SSP) && props && props.pageProps && props.pageProps.__N_REDIRECT) {\n        const destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n        // client-navigation if it is falling back to hard navigation if\n        // it's not\n        if (destination.startsWith('/')) {\n          const parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);\n          this._resolveHref(parsedHref, pages);\n          if (pages.includes(parsedHref.pathname)) {\n            return this.change(method, destination, destination, options);\n          }\n        }\n        window.location.href = destination;\n        return new Promise(() => {});\n      }\n      Router.events.emit('beforeHistoryChange', as);\n      this.changeState(method, url, addLocale(as, options.locale, this.defaultLocale), options);\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n      await this.set(route, pathname, query, cleanedAs, routeInfo).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs);\n        throw error;\n      }\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo(options._N_X, options._N_Y);\n        }\n      }\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale;\n        }\n      }\n      Router.events.emit('routeChangeComplete', as);\n      return true;\n    } catch (err) {\n      if (err.cancelled) {\n        return false;\n      }\n      throw err;\n    }\n  }\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError();\n    }\n    try {\n      let Component;\n      let styleSheets;\n      let props;\n      const ssg404 = err.message === SSG_DATA_NOT_FOUND_ERROR;\n      if (ssg404) {\n        try {\n          let mod;\n          ({\n            page: Component,\n            styleSheets,\n            mod\n          } = await this.fetchComponent('/404')); // TODO: should we tolerate these props missing and still render the\n          // page instead of falling back to _error?\n          if (mod && mod.__N_SSG) {\n            props = await this._getStaticData(this.pageLoader.getDataHref('/404', '/404', true, this.locale));\n          }\n        } catch (_err) {// non-fatal fallback to _error\n        }\n      }\n      if (typeof Component === 'undefined' || typeof styleSheets === 'undefined') {\n        ;\n        ({\n          page: Component,\n          styleSheets\n        } = await this.fetchComponent('/_error'));\n      }\n      const routeInfo = {\n        props,\n        Component,\n        styleSheets,\n        err: ssg404 ? undefined : err,\n        error: ssg404 ? undefined : err\n      };\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query\n          });\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr);\n          routeInfo.props = {};\n        }\n      }\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);\n    }\n  }\n  async getRouteInfo(route, pathname, query, as, shallow = false) {\n    try {\n      const cachedRouteInfo = this.components[route];\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo;\n      }\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      let dataHref;\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n          pathname,\n          query\n        }), delBasePath(as), __N_SSG, this.locale);\n      }\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component,\n      // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as);\n    }\n  }\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data);\n  } /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  _resolveHref(parsedHref, pages, applyBasePath = true) {\n    const {\n      pathname\n    } = parsedHref;\n    const cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(applyBasePath ? delBasePath(pathname) : pathname));\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref;\n    } // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some(page => {\n        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n          parsedHref.pathname = applyBasePath ? addBasePath(page) : page;\n          return true;\n        }\n      });\n    }\n    return parsedHref;\n  } /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname\n    } = parsed;\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      const normalizeLocalePath = require('../i18n/normalize-locale-path').normalizeLocalePath;\n      if (options.locale === false) {\n        pathname = normalizeLocalePath(pathname, this.locales).pathname;\n        parsed.pathname = pathname;\n        url = (0, _utils.formatWithValidation)(parsed);\n        let parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n        const localePathResult = normalizeLocalePath(parsedAs.pathname, this.locales);\n        parsedAs.pathname = localePathResult.pathname;\n        options.locale = localePathResult.detectedLocale || options.locale;\n        asPath = (0, _utils.formatWithValidation)(parsedAs);\n      }\n    }\n    const pages = await this.pageLoader.getPageList();\n    parsed = this._resolveHref(parsed, pages);\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (true) {\n      return;\n    }\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    await Promise.all([this.pageLoader.prefetchData(url, asPath, typeof options.locale !== 'undefined' ? options.locale : this.locale, this.defaultLocale), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    const componentResult = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return componentResult;\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n    if (false && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n  _getServerData(dataHref) {\n    return fetchNextData(dataHref, this.isSsr);\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    return this.sub(data, this.components['/_app'].Component);\n  }\n}\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["basePath","process","env","__NEXT_ROUTER_BASEPATH","buildCancellationError","Object","assign","Error","cancelled","addPathPrefix","path","prefix","startsWith","addLocale","locale","defaultLocale","__NEXT_I18N_SUPPORT","delLocale","substr","length","hasBasePath","addBasePath","delBasePath","slice","isLocalURL","url","locationOrigin","resolved","URL","origin","pathname","_","interpolateAs","route","asPathname","query","interpolatedRoute","dynamicRegex","dynamicGroups","groups","dynamicMatches","params","keys","every","param","value","repeat","optional","replaced","Array","isArray","replace","map","escapePathDelimiters","join","result","omitParmsFromQuery","filteredQuery","forEach","key","includes","resolveHref","currentPath","href","resolveAs","base","urlAsString","finalUrl","interpolatedAs","searchParams","hash","resolvedHref","PAGE_LOAD_ERROR","Symbol","markLoadingError","err","defineProperty","prepareUrlAs","router","as","manualScrollRestoration","__NEXT_SCROLL_RESTORATION","window","history","SSG_DATA_NOT_FOUND_ERROR","fetchRetry","attempts","credentials","then","res","ok","status","json","fetchNextData","dataHref","isServerRender","catch","Router","asPath","components","sdc","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","_shallow","locales","constructor","initialProps","App","wrapApp","Component","initialStyleSheets","subscription","styleSheets","props","__N_SSG","__N_SSP","__NEXT_DATA__","autoExport","changeState","addEventListener","onPopState","scrollRestoration","scrollDebounceTimeout","debouncedScrollSave","clearTimeout","setTimeout","curAs","options","state","_N_X","scrollX","_N_Y","scrollY","e","__N","change","shallow","reload","location","back","push","method","normalizeLocalePath","require","localePathResult","detectedLocale","_h","ST","performance","mark","abortComponentLoad","cleanedAs","onlyAHashChange","emit","scrollToHash","notify","pages","getPageList","__rewrites","rewrites","promisedBuildManifest","parsed","_resolveHref","urlIsNew","resolvedAs","__NEXT_HAS_REWRITES","p","potentialHref","parsedAs","routeRegex","routeMatch","shouldInterpolate","missingParams","filter","console","warn","routeInfo","getRouteInfo","error","pageProps","__N_REDIRECT","destination","parsedHref","Promise","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","scrollTo","document","documentElement","lang","handleRouteInfoError","loadErrorFail","ssg404","message","mod","page","fetchComponent","_getStaticData","getDataHref","_err","undefined","gipErr","routeInfoErr","cachedRouteInfo","isValidElementType","_getData","_getServerData","data","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","idEl","getElementById","scrollIntoView","nameEl","getElementsByName","applyBasePath","cleanPathname","some","re","test","prefetch","all","prefetchData","priority","cancel","componentResult","loadPage","fn","cacheKey","resolve","ctx","AppTree"],"mappings":";;;;;;;;;;;;;AAKA,IAAA,uBAAA,GAAA,OAAA,CAAA,0CAAA,CAAA;AAKA,IAAA,oBAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AASA,IAAA,UAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AACA,IAAA,qBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;;;;;CA3BA,4BACA;AAyCA,MAAMA,QAAQ,GAAIC,OAAO,CAACC,GAARD,CAAYE,sBAAb,IAAkD,EAAnE;AAEA,SAASC,sBAAT,CAAA,EAAkC;EAChC,OAAOC,MAAM,CAACC,MAAPD,CAAc,IAAIE,KAAJ,CAAU,iBAAV,CAAdF,EAA4C;IACjDG,SAAS,EAAE;EADsC,CAA5CH,CAAP;AAGD;AAED,SAASI,aAAT,CAAuBC,IAAvB,EAAqCC,MAArC,EAAsD;EACpD,OAAOA,MAAM,IAAID,IAAI,CAACE,UAALF,CAAgB,GAAhBA,CAAVC,GACHD,IAAI,KAAK,GAATA,GACE,CAAA,CAAA,EAAA,uBAAA,CAAA,0BAAA,EAA2BC,MAA3B,CADFD,GAEG,GAAEC,MAAO,GAAED,IAAK,EAHhBC,GAIHD,IAJJ;AAKD;AAEM,SAASG,SAAT,CACLH,IADK,EAELI,MAFK,EAGLC,aAHK,EAIL;EACA,IAAId,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;IACnC,OAAOF,MAAM,IACXA,MAAM,KAAKC,aADND,IAEL,CAACJ,IAAI,CAACE,UAALF,CAAgB,GAAA,GAAMI,MAAN,GAAe,GAA/BJ,CAFII,IAGLJ,IAAI,KAAK,GAAA,GAAMI,MAHVA,GAIHL,aAAa,CAACC,IAAD,EAAO,GAAA,GAAMI,MAAb,CAJVA,GAKHJ,IALJ;EAMD;EACD,OAAOA,IAAP;AACD;AAEM,SAASO,SAAT,CAAmBP,IAAnB,EAAiCI,MAAjC,EAAkD;EACvD,IAAIb,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;IACnC,OAAOF,MAAM,KACVJ,IAAI,CAACE,UAALF,CAAgB,GAAA,GAAMI,MAAN,GAAe,GAA/BJ,CAAAA,IAAuCA,IAAI,KAAK,GAAA,GAAMI,MAD5C,CAANA,GAEHJ,IAAI,CAACQ,MAALR,CAAYI,MAAM,CAACK,MAAPL,GAAgB,CAA5BJ,CAAAA,IAAkC,GAF/BI,GAGHJ,IAHJ;EAID;EACD,OAAOA,IAAP;AACD;AAEM,SAASU,WAAT,CAAqBV,IAArB,EAA4C;EACjD,OAAOA,IAAI,KAAKV,QAATU,IAAqBA,IAAI,CAACE,UAALF,CAAgBV,QAAQ,GAAG,GAA3BU,CAA5B;AACD;AAEM,SAASW,WAAT,CAAqBX,IAArB,EAA2C;EAChD;EACA,OAAOD,aAAa,CAACC,IAAD,EAAOV,QAAP,CAApB;AACD;AAEM,SAASsB,WAAT,CAAqBZ,IAArB,EAA2C;EAChD,OAAOA,IAAI,CAACa,KAALb,CAAWV,QAAQ,CAACmB,MAApBT,CAAAA,IAA+B,GAAtC;AACD,CAED;;;AAGO,SAASc,UAAT,CAAoBC,GAApB,EAA0C;EAC/C,IAAIA,GAAG,CAACb,UAAJa,CAAe,GAAfA,CAAJ,EAAyB,OAAO,IAAP;EACzB,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAA,EAAA,CAAvB;IACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQH,GAAR,EAAaC,cAAb,CAAjB;IACA,OAAOC,QAAQ,CAACE,MAATF,KAAoBD,cAApBC,IAAsCP,WAAW,CAACO,QAAQ,CAACG,QAAV,CAAxD;EACD,CAAC,QAAOC,CAAP,EAAU;IACV,OAAO,KAAP;EACD;AACF;AAIM,SAASC,aAAT,CACLC,KADK,EAELC,UAFK,EAGLC,KAHK,EAIL;EACA,IAAIC,iBAAiB,GAAG,EAAxB;EAEA,MAAMC,YAAY,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,aAAA,EAAcJ,KAAd,CAArB;EACA,MAAMK,aAAa,GAAGD,YAAY,CAACE,MAAnC;EACA,MAAMC,cAAc;EAClB;EACA,CAACN,UAAU,KAAKD,KAAfC,GAAuB,CAAA,CAAA,EAAA,aAAA,CAAA,eAAA,EAAgBG,YAAhB,CAAA,CAA8BH,UAA9B,CAAvBA,GAAmE,EAApE;EACA;EACA;EACAC,KALF;EAOAC,iBAAiB,GAAGH,KAApBG;EACA,MAAMK,MAAM,GAAGpC,MAAM,CAACqC,IAAPrC,CAAYiC,aAAZjC,CAAf;EAEA,IACE,CAACoC,MAAM,CAACE,KAAPF,CAAcG,KAAD,IAAW;IACvB,IAAIC,KAAK,GAAGL,cAAc,CAACI,KAAD,CAAdJ,IAAyB,EAArC;IACA,MAAM;MAAEM,MAAF;MAAUC;IAAV,CAAA,GAAuBT,aAAa,CAACM,KAAD,CAA1C,CAEA;IACA;IACA,IAAII,QAAQ,GAAI,IAAGF,MAAM,GAAG,KAAH,GAAW,EAAG,GAAEF,KAAM,GAA/C;IACA,IAAIG,QAAJ,EAAc;MACZC,QAAQ,GAAI,GAAE,CAACH,KAAD,GAAS,GAAT,GAAe,EAAG,IAAGG,QAAS,GAA5CA;IACD;IACD,IAAIF,MAAM,IAAI,CAACG,KAAK,CAACC,OAAND,CAAcJ,KAAdI,CAAf,EAAqCJ,KAAK,GAAG,CAACA,KAAD,CAARA;IAErC,OACE,CAACE,QAAQ,IAAIH,KAAK,IAAIJ,cAAtB;IACA;IACCJ,iBAAiB,GAChBA,iBAAiB,CAAEe,OAAnBf,CACEY,QADFZ,EAEEU,MAAM,GACDD,KAAD,CAAoBO,GAApB,CAAwBC,qBAAAA,CAAAA,OAAxB,CAAA,CAA8CC,IAA9C,CAAmD,GAAnD,CADE,GAEF,CAAA,CAAA,EAAA,qBAAA,CAAA,OAAA,EAAqBT,KAArB,CAJNT,CAAAA,IAKK,GARP,CADF;EAWD,CAvBAK,CADH,EAyBE;IACAL,iBAAiB,GAAG,EAApBA,CAAuB;IAEvB;IACA;EACD;EACD,OAAO;IACLK,MADK;IAELc,MAAM,EAAEnB;EAFH,CAAP;AAID;AAED,SAASoB,kBAAT,CAA4BrB,KAA5B,EAAmDM,MAAnD,EAAqE;EACnE,MAAMgB,aAA6B,GAAG,CAAA,CAAtC;EAEApD,MAAM,CAACqC,IAAPrC,CAAY8B,KAAZ9B,CAAAA,CAAmBqD,OAAnBrD,CAA4BsD,GAAD,IAAS;IAClC,IAAI,CAAClB,MAAM,CAACmB,QAAPnB,CAAgBkB,GAAhBlB,CAAL,EAA2B;MACzBgB,aAAa,CAACE,GAAD,CAAbF,GAAqBtB,KAAK,CAACwB,GAAD,CAA1BF;IACD;EACF,CAJDpD,CAAAA;EAKA,OAAOoD,aAAP;AACD,CAED;;;;AAIO,SAASI,WAAT,CACLC,WADK,EAELC,IAFK,EAGLC,SAHK,EAIG;EACR;EACA,MAAMC,IAAI,GAAG,IAAIrC,GAAJ,CAAQkC,WAAR,EAAqB,UAArB,CAAb;EACA,MAAMI,WAAW,GACf,OAAOH,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqBA,IAArB,CADpC;EAEA,IAAI;IACF,MAAMI,QAAQ,GAAG,IAAIvC,GAAJ,CAAQsC,WAAR,EAAqBD,IAArB,CAAjB;IACAE,QAAQ,CAACrC,QAATqC,GAAoB,CAAA,CAAA,EAAA,uBAAA,CAAA,0BAAA,EAA2BA,QAAQ,CAACrC,QAApC,CAApBqC;IACA,IAAIC,cAAc,GAAG,EAArB;IAEA,IACE,CAAA,CAAA,EAAA,UAAA,CAAA,cAAA,EAAeD,QAAQ,CAACrC,QAAxB,CAAA,IACAqC,QAAQ,CAACE,YADT,IAEAL,SAHF,EAIE;MACA,MAAM7B,KAAK,GAAG,CAAA,CAAA,EAAA,YAAA,CAAA,sBAAA,EAAuBgC,QAAQ,CAACE,YAAhC,CAAd;MAEA,MAAM;QAAEd,MAAF;QAAUd;MAAV,CAAA,GAAqBT,aAAa,CACtCmC,QAAQ,CAACrC,QAD6B,EAEtCqC,QAAQ,CAACrC,QAF6B,EAGtCK,KAHsC,CAAxC;MAMA,IAAIoB,MAAJ,EAAY;QACVa,cAAc,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB;UACpCtC,QAAQ,EAAEyB,MAD0B;UAEpCe,IAAI,EAAEH,QAAQ,CAACG,IAFqB;UAGpCnC,KAAK,EAAEqB,kBAAkB,CAACrB,KAAD,EAAQM,MAAR;QAHW,CAArB,CAAjB2B;MAKD;IACF,CAED;IACA,MAAMG,YAAY,GAChBJ,QAAQ,CAACtC,MAATsC,KAAoBF,IAAI,CAACpC,MAAzBsC,GACIA,QAAQ,CAACJ,IAATI,CAAc5C,KAAd4C,CAAoBA,QAAQ,CAACtC,MAATsC,CAAgBhD,MAApCgD,CADJA,GAEIA,QAAQ,CAACJ,IAHf;IAKA,OAAQC,SAAS,GACb,CAACO,YAAD,EAAeH,cAAc,IAAIG,YAAjC,CADa,GAEbA,YAFJ;EAGD,CAAC,QAAOxC,CAAP,EAAU;IACV,OAAQiC,SAAS,GAAG,CAACE,WAAD,CAAH,GAAmBA,WAApC;EACD;AACF;AAED,MAAMM,eAAe,GAAGC,MAAM,CAAC,iBAAD,CAA9B;AACO,SAASC,gBAAT,CAA0BC,GAA1B,EAA6C;EAClD,OAAOtE,MAAM,CAACuE,cAAPvE,CAAsBsE,GAAtBtE,EAA2BmE,eAA3BnE,EAA4C,CAAA,CAA5CA,CAAP;AACD;AAED,SAASwE,YAAT,CAAsBC,MAAtB,EAA0CrD,GAA1C,EAAoDsD,EAApD,EAA6D;EAC3D;EACA;EACA,OAAO;IACLtD,GAAG,EAAEJ,WAAW,CAACwC,WAAW,CAACiB,MAAM,CAAChD,QAAR,EAAkBL,GAAlB,CAAZ,CADX;IAELsD,EAAE,EAAEA,EAAE,GAAG1D,WAAW,CAACwC,WAAW,CAACiB,MAAM,CAAChD,QAAR,EAAkBiD,EAAlB,CAAZ,CAAd,GAAmDA;EAFpD,CAAP;AAID;AAsDD,MAAMC,uBAAuB,GAC3B/E,OAAO,CAACC,GAARD,CAAYgF,yBAAZhF,SAAAA,IAEA,mBAAA,IAAuBiF,MAAM,CAACC,OAHhC;AAKA,MAAMC,wBAAwB,GAAG,oBAAjC;AAEA,SAASC,UAAT,CAAoB5D,GAApB,EAAiC6D,QAAjC,EAAiE;EAC/D,OAAO,KAAK,CAAC7D,GAAD,EAAM;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA8D,WAAW,EAAE;EAZG,CAAN,CAAL,CAaJC,IAbI,CAaEC,GAAD,IAAS;IACf,IAAI,CAACA,GAAG,CAACC,EAAT,EAAa;MACX,IAAIJ,QAAQ,GAAG,CAAXA,IAAgBG,GAAG,CAACE,MAAJF,IAAc,GAAlC,EAAuC;QACrC,OAAOJ,UAAU,CAAC5D,GAAD,EAAM6D,QAAQ,GAAG,CAAjB,CAAjB;MACD;MACD,IAAIG,GAAG,CAACE,MAAJF,KAAe,GAAnB,EAAwB;QACtB;QACA;QACA,MAAM,IAAIlF,KAAJ,CAAU6E,wBAAV,CAAN;MACD;MACD,MAAM,IAAI7E,KAAJ,CAAW,6BAAX,CAAN;IACD;IACD,OAAOkF,GAAG,CAACG,IAAJH,CAAAA,CAAP;EACD,CA1BM,CAAP;AA2BD;AAED,SAASI,aAAT,CAAuBC,QAAvB,EAAyCC,cAAzC,EAAkE;EAChE,OAAO,UAAU,CAACD,QAAD,EAAWC,cAAc,GAAG,CAAH,GAAO,CAAhC,CAAV,CAA6CC,KAA7C,CAAoDrB,GAAD,IAAgB;IACxE;IACA;IACA;IAEA,IAAI,CAACoB,cAAL,EAAqB;MACnBrB,gBAAgB,CAACC,GAAD,CAAhBD;IACD;IACD,MAAMC,GAAN;EACD,CATM,CAAP;AAUD;AAEc,MAAMsB,MAA6B;EAOhD;;AAPgD,IAOhD,CAIA;EAkBAe,WAAW,CACTlF,SADS,EAETK,MAFS,EAGT4C,GAHS,EAIT;IACEkC,YADF;IAEEV,UAFF;IAGEW,GAHF;IAIEC,OAJF;IAKEC,SALF;IAMEC,kBANF;IAOE1C,GAPF;IAQE2C,YARF;IASEV,UATF;IAUE9F,MAVF;IAWEiG,OAXF;IAYEhG;EAZF,CAJS,EA+BT;IAAA,IAAA,CA3DFkB,KA2DE,GAAA,KAAA,CAAA;IAAA,IAAA,CA1DFH,QA0DE,GAAA,KAAA,CAAA;IAAA,IAAA,CAzDFK,KAyDE,GAAA,KAAA,CAAA;IAAA,IAAA,CAxDF+D,MAwDE,GAAA,KAAA,CAAA;IAAA,IAAA,CAvDFlG,QAuDE,GAAA,KAAA,CAAA;IAAA,IAAA,CAlDFmG,UAkDE,GAAA,KAAA,CAAA;IAAA,IAAA,CAhDFC,GAgDE,GAhDkC,CAAA,CAgDlC;IAAA,IAAA,CA/CFC,GA+CE,GAAA,KAAA,CAAA;IAAA,IAAA,CA9CFC,GA8CE,GAAA,KAAA,CAAA;IAAA,IAAA,CA7CFC,UA6CE,GAAA,KAAA,CAAA;IAAA,IAAA,CA5CFC,IA4CE,GAAA,KAAA,CAAA;IAAA,IAAA,CA3CFC,MA2CE,GAAA,KAAA,CAAA;IAAA,IAAA,CA1CFC,QA0CE,GAAA,KAAA,CAAA;IAAA,IAAA,CAzCFC,KAyCE,GAAA,KAAA,CAAA;IAAA,IAAA,CAxCFC,UAwCE,GAAA,KAAA,CAAA;IAAA,IAAA,CAvCFC,cAuCE,GAAA,KAAA,CAAA;IAAA,IAAA,CAtCFC,QAsCE,GAAA,KAAA,CAAA;IAAA,IAAA,CArCFhG,MAqCE,GAAA,KAAA,CAAA;IAAA,IAAA,CApCFiG,OAoCE,GAAA,KAAA,CAAA;IAAA,IAAA,CAnCFhG,aAmCE,GAAA,KAAA,CAAA;IAAA,IAAA,CAqGFgH,UArGE,GAqGYa,CAAD,IAA4B;MACvC,MAAML,KAAK,GAAGK,CAAC,CAACL,KAAhB;MAEA,IAAI,CAACA,KAAL,EAAY;QACV;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,MAAM;UAAEzG,QAAF;UAAYK;QAAZ,CAAA,GAAsB,IAA5B;QACA,IAAA,CAAK0F,WAAL,CACE,cADF,EAEE,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB;UAAE/F,QAAQ,EAAET,WAAW,CAACS,QAAD,CAAvB;UAAmCK;QAAnC,CAArB,CAFF,EAGE,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAHF,CAAA;QAKA;MACD;MAED,IAAI,CAACoG,KAAK,CAACM,GAAX,EAAgB;QACd;MACD;MAED,MAAM;QAAEpH,GAAF;QAAOsD,EAAP;QAAWuD;MAAX,CAAA,GAAuBC,KAA7B;MAEA,MAAM;QAAEzG;MAAF,CAAA,GAAe,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiBL,GAAjB,CAArB,CAEA;MACA;MACA,IAAI,IAAA,CAAKkF,KAAL,IAAc5B,EAAE,KAAK,IAAA,CAAKmB,MAA1B,IAAoCpE,QAAQ,KAAK,IAAA,CAAKA,QAA1D,EAAoE;QAClE;MACD,CAED;MACA;MACA,IAAI,IAAA,CAAK0E,IAAL,IAAa,CAAC,IAAA,CAAKA,IAAL,CAAU+B,KAAV,CAAlB,EAAoC;QAClC;MACD;MAED,IAAA,CAAKO,MAAL,CACE,cADF,EAEErH,GAFF,EAGEsD,EAHF,EAIE1E,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBiI,OAAlBjI,EAA2B;QACzB0I,OAAO,EAAET,OAAO,CAACS,OAART,IAAmB,IAAA,CAAKxB,QADR;QAEzBhG,MAAM,EAAEwH,OAAO,CAACxH,MAARwH,IAAkB,IAAA,CAAKvH;MAFN,CAA3BV,CAJF,CAAA;IASD,CAxJC,CACA;IACA,IAAA,CAAK4B,KAAL,GAAa,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBH,SAAxB,CAAb,CAEA;IACA,IAAA,CAAKqE,UAAL,GAAkB,CAAA,CAAlB,CACA;IACA;IACA;IACA,IAAIrE,SAAQ,KAAK,SAAjB,EAA4B;MAC1B,IAAA,CAAKqE,UAAL,CAAgB,IAAA,CAAKlE,KAArB,CAAA,GAA8B;QAC5BmF,SAD4B;QAE5BG,WAAW,EAAEF,kBAFe;QAG5BG,KAAK,EAAEP,YAHqB;QAI5BtC,GAJ4B;QAK5B8C,OAAO,EAAER,YAAY,IAAIA,YAAY,CAACQ,OALV;QAM5BC,OAAO,EAAET,YAAY,IAAIA,YAAY,CAACS;MANV,CAA9B;IAQD;IAED,IAAA,CAAKvB,UAAL,CAAgB,OAAhB,CAAA,GAA2B;MACzBiB,SAAS,EAAEF,GADc;MAEzBK,WAAW,EAAE,CAAA;IAFY,CAA3B,CAOA;IACA;IACA,IAAA,CAAKd,MAAL,GAAcR,MAAM,CAACQ,MAArB;IAEA,IAAA,CAAKF,UAAL,GAAkBA,UAAlB;IACA,IAAA,CAAKzE,QAAL,GAAgBA,SAAhB;IACA,IAAA,CAAKK,KAAL,GAAaA,MAAb,CACA;IACA;IACA,IAAA,CAAK+D,MAAL;IACE;IACA,CAAA,CAAA,EAAA,UAAA,CAAA,cAAA,EAAepE,SAAf,CAAA,IAA4B6F,aAAa,CAACC,UAA1C,GAAuD9F,SAAvD,GAAkEiD,GAFpE;IAGA,IAAA,CAAK/E,QAAL,GAAgBA,QAAhB;IACA,IAAA,CAAKqG,GAAL,GAAWiB,YAAX;IACA,IAAA,CAAKhB,GAAL,GAAW,IAAX;IACA,IAAA,CAAKI,QAAL,GAAgBS,OAAhB,CACA;IACA;IACA,IAAA,CAAKR,KAAL,GAAa,IAAb;IAEA,IAAA,CAAKC,UAAL,GAAkBA,UAAlB;IAEA,IAAI3G,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;MACnC,IAAA,CAAKF,MAAL,GAAcA,MAAd;MACA,IAAA,CAAKiG,OAAL,GAAeA,OAAf;MACA,IAAA,CAAKhG,aAAL,GAAqBA,aAArB;IACD;IAED,WAAmC;MACjC;MACA;MACA,IAAIgE,GAAE,CAAC7D,MAAH6D,CAAU,CAAVA,EAAa,CAAbA,CAAAA,KAAoB,IAAxB,EAA8B;QAC5B;QACA;QACA,IAAA,CAAK8C,WAAL,CACE,cADF,EAEE,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB;UAAE/F,QAAQ,EAAET,WAAW,CAACS,SAAD,CAAvB;UAAmCK,KAAK,EAALA;QAAnC,CAArB,CAFF,EAGE,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAHF,CAAA;MAKD;MAED+C,MAAM,CAAC4C,gBAAP5C,CAAwB,UAAxBA,EAAoC,IAAA,CAAK6C,UAAzC7C,CAAAA,CAEA;MACA;MACA,IAAIjF,OAAO,CAACC,GAARD,CAAYgF,yBAAhB,EAA2C;QACzC,IAAID,uBAAJ,EAA6B;UAC3BE,MAAM,CAACC,OAAPD,CAAe8C,iBAAf9C,GAAmC,QAAnCA;UAEA,IAAI+C,qBAAJ;UAEA,MAAMC,mBAAmB,GAAG,CAAA,KAAM;YAChC,IAAID,qBAAJ,EAA2BE,YAAY,CAACF,qBAAD,CAAZE;YAE3BF,qBAAqB,GAAGG,UAAU,CAAC,MAAM;cACvC,MAAM;gBAAE3G,GAAF;gBAAOsD,EAAE,EAAEsD,KAAX;gBAAkBC;cAAlB,CAAA,GAA8BnD,OAAO,CAACoD,KAA5C;cACA,IAAA,CAAKV,WAAL,CACE,cADF,EAEEpG,GAFF,EAGE4G,KAHF,EAIEhI,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBiI,OAAlBjI,EAA2B;gBACzBmI,IAAI,EAAEtD,MAAM,CAACuD,OADY;gBAEzBC,IAAI,EAAExD,MAAM,CAACyD;cAFY,CAA3BtI,CAJF,CAAA;YASD,CAXiC,EAW/B,EAX+B,CAAlC4H;UAYD,CAfD;UAiBA/C,MAAM,CAAC4C,gBAAP5C,CAAwB,QAAxBA,EAAkCgD,mBAAlChD,CAAAA;QACD;MACF;IACF;EACF;EAuDD8D,MAAM,CAAA,EAAS;IACb9D,MAAM,CAAC+D,QAAP/D,CAAgB8D,MAAhB9D,CAAAA,CAAAA;EACD,CAED;;;EAGAgE,IAAI,CAAA,EAAG;IACLhE,MAAM,CAACC,OAAPD,CAAegE,IAAfhE,CAAAA,CAAAA;EACD,CAED;;;;;;EAMAiE,IAAI,CAAC1H,GAAD,EAAWsD,EAAO,GAAGtD,GAArB,EAA0B6G,OAA0B,GAAG,CAAA,CAAvD,EAA2D;IAC7D;IAAC,CAAC;MAAE7G,GAAF;MAAOsD;IAAP,CAAA,GAAcF,YAAY,CAAC,IAAD,EAAOpD,GAAP,EAAYsD,EAAZ,CAA3B;IACD,OAAO,IAAA,CAAK+D,MAAL,CAAY,WAAZ,EAAyBrH,GAAzB,EAA8BsD,EAA9B,EAAkCuD,OAAlC,CAAP;EACD,CAED;;;;;;EAMAnF,OAAO,CAAC1B,GAAD,EAAWsD,EAAO,GAAGtD,GAArB,EAA0B6G,OAA0B,GAAG,CAAA,CAAvD,EAA2D;IAChE;IAAC,CAAC;MAAE7G,GAAF;MAAOsD;IAAP,CAAA,GAAcF,YAAY,CAAC,IAAD,EAAOpD,GAAP,EAAYsD,EAAZ,CAA3B;IACD,OAAO,IAAA,CAAK+D,MAAL,CAAY,cAAZ,EAA4BrH,GAA5B,EAAiCsD,EAAjC,EAAqCuD,OAArC,CAAP;EACD;EAED,MAAMQ,MAAN,CACEM,MADF,EAEE3H,GAFF,EAGEsD,EAHF,EAIEuD,OAJF,EAKoB;IAClB,IAAI,CAAC9G,UAAU,CAACC,GAAD,CAAf,EAAsB;MACpByD,MAAM,CAAC+D,QAAP/D,CAAgBnB,IAAhBmB,GAAuBzD,GAAvByD;MACA,OAAO,KAAP;IACD;IAED,IAAIjF,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;MACnC,IAAA,CAAKF,MAAL,GAAcwH,OAAO,CAACxH,MAARwH,IAAkB,IAAA,CAAKxH,MAArC;MAEA,IAAI,OAAOwH,OAAO,CAACxH,MAAf,KAA0B,WAA9B,EAA2C;QACzCwH,OAAO,CAACxH,MAARwH,GAAiB,IAAA,CAAKxH,MAAtBwH;MACD;MAED,MAAM;QACJe;MADI,CAAA,GAEFC,OAAO,CAAC,+BAAD,CAFX;MAIA,MAAMC,gBAAgB,GAAGF,mBAAmB,CAACtE,EAAD,EAAK,IAAA,CAAKgC,OAAV,CAA5C;MAEA,IAAIwC,gBAAgB,CAACC,cAArB,EAAqC;QACnC,IAAA,CAAK1I,MAAL,GAAcyI,gBAAgB,CAACC,cAA/B;QACA/H,GAAG,GAAG8H,gBAAgB,CAACzH,QAAvBL;MACD;IACF;IAED,IAAI,CAAE6G,OAAD,CAAiBmB,EAAtB,EAA0B;MACxB,IAAA,CAAK9C,KAAL,GAAa,KAAb;IACD,CACD;IACA,IAAI+C,MAAAA,CAAAA,EAAJ,EAAQ;MACNC,WAAW,CAACC,IAAZD,CAAiB,aAAjBA,CAAAA;IACD;IAED,IAAI,IAAA,CAAK9C,cAAT,EAAyB;MACvB,IAAA,CAAKgD,kBAAL,CAAwB,IAAA,CAAKhD,cAA7B,CAAA;IACD;IAED9B,EAAE,GAAGlE,SAAS,CAACkE,EAAD,EAAKuD,OAAO,CAACxH,MAAb,EAAqB,IAAA,CAAKC,aAA1B,CAAdgE;IACA,MAAM+E,SAAS,GAAG7I,SAAS,CACzBG,WAAW,CAAC2D,EAAD,CAAX3D,GAAkBE,WAAW,CAACyD,EAAD,CAA7B3D,GAAoC2D,EADX,EAEzB,IAAA,CAAKjE,MAFoB,CAA3B;IAIA,IAAA,CAAK+F,cAAL,GAAsB9B,EAAtB,CAEA;IACA;IAEA;IACA;IACA;IACA,IAAI,CAAEuD,OAAD,CAAiBmB,EAAlB,IAAwB,IAAA,CAAKM,eAAL,CAAqBD,SAArB,CAA5B,EAA6D;MAC3D,IAAA,CAAK5D,MAAL,GAAc4D,SAAd;MACA7D,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,iBAAnBA,EAAsClB,EAAtCkB,CAAAA,CACA;MACA,IAAA,CAAK4B,WAAL,CAAiBuB,MAAjB,EAAyB3H,GAAzB,EAA8BsD,EAA9B,EAAkCuD,OAAlC,CAAA;MACA,IAAA,CAAK2B,YAAL,CAAkBH,SAAlB,CAAA;MACA,IAAA,CAAKI,MAAL,CAAY,IAAA,CAAK/D,UAAL,CAAgB,IAAA,CAAKlE,KAArB,CAAZ,CAAA;MACAgE,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,oBAAnBA,EAAyClB,EAAzCkB,CAAAA;MACA,OAAO,IAAP;IACD,CAED;IACA;IACA;IACA,MAAMkE,KAAK,GAAG,MAAM,IAAA,CAAK5D,UAAL,CAAgB6D,WAAhB,CAAA,CAApB;IACA,MAAM;MAAEC,UAAU,EAAEC;IAAd,CAAA,GAA2B,MAAM,IAAA,CAAK/D,UAAL,CAAgBgE,qBAAvD;IAEA,IAAIC,MAAM,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiB/I,GAAjB,CAAb;IAEA,IAAI;MAAEK,QAAF;MAAYK;IAAZ,CAAA,GAAsBqI,MAA1B;IAEAA,MAAM,GAAG,IAAA,CAAKC,YAAL,CAAkBD,MAAlB,EAA0BL,KAA1B,CAATK;IAEA,IAAIA,MAAM,CAAC1I,QAAP0I,KAAoB1I,QAAxB,EAAkC;MAChCA,QAAQ,GAAG0I,MAAM,CAAC1I,QAAlBA;MACAL,GAAG,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB+I,MAArB,CAAN/I;IACD,CAED;IACA;IACA;IACAK,QAAQ,GAAGA,QAAQ,GACf,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBR,WAAW,CAACQ,QAAD,CAAnC,CADe,GAEfA,QAFJA,CAIA;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC,IAAA,CAAK4I,QAAL,CAAcZ,SAAd,CAAL,EAA+B;MAC7BV,MAAM,GAAG,cAATA;IACD;IAED,IAAInH,KAAK,GAAG,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBH,QAAxB,CAAZ;IACA,MAAM;MAAEiH,OAAO,GAAG;IAAZ,CAAA,GAAsBT,OAA5B,CAEA;IACA;IACA,IAAIqC,UAAU,GAAG5F,EAAjB;IAEA,IAAI9E,OAAO,CAACC,GAARD,CAAY2K,mBAAhB,EAAqC;MACnCD,UAAU,GAAG,CAAA,CAAA,EAAA,gBAAA,CAAA,OAAA,EACX,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiB5F,EAAjB,CAAA,CAAqBjD,QADV,EAEXqI,KAFW,EAGXnK,QAHW,EAIXsK,QAJW,EAKXnI,KALW,EAMV0I,CAAD,IAAe,IAAA,CAAKJ,YAAL,CAAkB;QAAE3I,QAAQ,EAAE+I;MAAZ,CAAlB,EAAmCV,KAAnC,CAAA,CAA0CrI,QAN9C,CAAb6I;MASA,IAAIA,UAAU,KAAK5F,EAAnB,EAAuB;QACrB,MAAM+F,aAAa,GAAG,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EACpB,IAAA,CAAKL,YAAL,CACEpK,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkBmK,MAAlBnK,EAA0B;UAAEyB,QAAQ,EAAE6I;QAAZ,CAA1BtK,CADF,EAEE8J,KAFF,EAGE,KAHF,CAAA,CAIErI,QALkB,CAAtB,CAQA;QACA;QACA,IAAIqI,KAAK,CAACvG,QAANuG,CAAeW,aAAfX,CAAJ,EAAmC;UACjClI,KAAK,GAAG6I,aAAR7I;UACAH,QAAQ,GAAGgJ,aAAXhJ;UACA0I,MAAM,CAAC1I,QAAP0I,GAAkB1I,QAAlB0I;UACA/I,GAAG,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB+I,MAArB,CAAN/I;QACD;MACF;IACF;IACDkJ,UAAU,GAAG1J,SAAS,CAACK,WAAW,CAACqJ,UAAD,CAAZ,EAA0B,IAAA,CAAK7J,MAA/B,CAAtB6J;IAEA,IAAI,CAAA,CAAA,EAAA,UAAA,CAAA,cAAA,EAAe1I,KAAf,CAAJ,EAA2B;MACzB,MAAM8I,QAAQ,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiBJ,UAAjB,CAAjB;MACA,MAAMzI,UAAU,GAAG6I,QAAQ,CAACjJ,QAA5B;MAEA,MAAMkJ,UAAU,GAAG,CAAA,CAAA,EAAA,WAAA,CAAA,aAAA,EAAc/I,KAAd,CAAnB;MACA,MAAMgJ,UAAU,GAAG,CAAA,CAAA,EAAA,aAAA,CAAA,eAAA,EAAgBD,UAAhB,CAAA,CAA4B9I,UAA5B,CAAnB;MACA,MAAMgJ,iBAAiB,GAAGjJ,KAAK,KAAKC,UAApC;MACA,MAAMkC,cAAc,GAAG8G,iBAAiB,GACpClJ,aAAa,CAACC,KAAD,EAAQC,UAAR,EAAoBC,KAApB,CADuB,GAEnC,CAAA,CAFL;MAIA,IAAI,CAAC8I,UAAD,IAAgBC,iBAAiB,IAAI,CAAC9G,cAAc,CAACb,MAAzD,EAAkE;QAChE,MAAM4H,aAAa,GAAG9K,MAAM,CAACqC,IAAPrC,CAAY2K,UAAU,CAACzI,MAAvBlC,CAAAA,CAA+B+K,MAA/B/K,CACnBuC,KAAD,IAAW,CAACT,KAAK,CAACS,KAAD,CADGvC,CAAtB;QAIA,IAAI8K,aAAa,CAAChK,MAAdgK,GAAuB,CAA3B,EAA8B;UAC5B,UAA2C;YACzCE,OAAO,CAACC,IAARD,CACG,GACCH,iBAAiB,GACZ,oBADY,GAEZ,iCACN,8BAJD,GAKG,eAAcC,aAAa,CAAC7H,IAAd6H,CACb,IADaA,CAEb,8BARNE,CAAAA;UAUD;UAED,MAAM,IAAI9K,KAAJ,CACJ,CAAC2K,iBAAiB,GACb,0BAAyBzJ,GAAI,oCAAmC0J,aAAa,CAAC7H,IAAd6H,CAC/D,IAD+DA,CAE/D,iCAHY,GAIb,8BAA6BjJ,UAAW,8CAA6CD,KAAM,KAJhG,IAKG,4CACCiJ,iBAAiB,GACb,2BADa,GAEb,sBACL,EAVC,CAAN;QAYD;MACF,CAhCD,MAgCO,IAAIA,iBAAJ,EAAuB;QAC5BnG,EAAE,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EACH1E,MAAM,CAACC,MAAPD,CAAc,CAAA,CAAdA,EAAkB0K,QAAlB1K,EAA4B;UAC1ByB,QAAQ,EAAEsC,cAAc,CAACb,MADC;UAE1BpB,KAAK,EAAEqB,kBAAkB,CAACrB,KAAD,EAAQiC,cAAc,CAAC3B,MAAvB;QAFC,CAA5BpC,CADG,CAAL0E;MAMD,CAPM,MAOA;QACL;QACA1E,MAAM,CAACC,MAAPD,CAAc8B,KAAd9B,EAAqB4K,UAArB5K,CAAAA;MACD;IACF;IAED4F,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,kBAAnBA,EAAuClB,EAAvCkB,CAAAA;IAEA,IAAI;MACF,MAAMsF,SAAS,GAAG,MAAM,IAAA,CAAKC,YAAL,CACtBvJ,KADsB,EAEtBH,QAFsB,EAGtBK,KAHsB,EAItB4C,EAJsB,EAKtBgE,OALsB,CAAxB;MAOA,IAAI;QAAE0C,KAAF;QAASjE,KAAT;QAAgBC,OAAhB;QAAyBC;MAAzB,CAAA,GAAqC6D,SAAzC,CAEA;MACA,IACE,CAAC9D,OAAO,IAAIC,OAAZ,KACAF,KADA,IAECA,KAAD,CAAekE,SAFf,IAGClE,KAAD,CAAekE,SAAf,CAAyBC,YAJ3B,EAKE;QACA,MAAMC,WAAW,GAAIpE,KAAD,CAAekE,SAAf,CAAyBC,YAA7C,CAEA;QACA;QACA;QACA,IAAIC,WAAW,CAAChL,UAAZgL,CAAuB,GAAvBA,CAAJ,EAAiC;UAC/B,MAAMC,UAAU,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiBD,WAAjB,CAAnB;UACA,IAAA,CAAKnB,YAAL,CAAkBoB,UAAlB,EAA8B1B,KAA9B,CAAA;UAEA,IAAIA,KAAK,CAACvG,QAANuG,CAAe0B,UAAU,CAAC/J,QAA1BqI,CAAJ,EAAyC;YACvC,OAAO,IAAA,CAAKrB,MAAL,CAAYM,MAAZ,EAAoBwC,WAApB,EAAiCA,WAAjC,EAA8CtD,OAA9C,CAAP;UACD;QACF;QAEDpD,MAAM,CAAC+D,QAAP/D,CAAgBnB,IAAhBmB,GAAuB0G,WAAvB1G;QACA,OAAO,IAAI4G,OAAJ,CAAY,MAAM,CAAE,CAApB,CAAP;MACD;MAED7F,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,qBAAnBA,EAA0ClB,EAA1CkB,CAAAA;MACA,IAAA,CAAK4B,WAAL,CACEuB,MADF,EAEE3H,GAFF,EAGEZ,SAAS,CAACkE,EAAD,EAAKuD,OAAO,CAACxH,MAAb,EAAqB,IAAA,CAAKC,aAA1B,CAHX,EAIEuH,OAJF,CAAA;MAOA,UAA2C;QACzC,MAAMyD,OAAY,GAAG,IAAA,CAAK5F,UAAL,CAAgB,OAAhB,CAAA,CAAyBiB,SAA9C;QACElC,MAAD,CAAgB8G,IAAhB,CAAqBC,aAArB,GACCF,OAAO,CAACG,eAARH,KAA4BA,OAAO,CAACI,mBAApCJ,IACA,CAAER,SAAS,CAACnE,SAAX,CAA6B8E,eAF/B;MAGF;MAED,MAAM,IAAA,CAAKE,GAAL,CAASnK,KAAT,EAAgBH,QAAhB,EAA2BK,KAA3B,EAAkC2H,SAAlC,EAA6CyB,SAA7C,CAAA,CAAwDvF,KAAxD,CACH4C,CAAD,IAAO;QACL,IAAIA,CAAC,CAACpI,SAAN,EAAiBiL,KAAK,GAAGA,KAAK,IAAI7C,CAAjB6C,CAAjB,KACK,MAAM7C,CAAN;MACN,CAJG,CAAN;MAOA,IAAI6C,KAAJ,EAAW;QACTxF,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,kBAAnBA,EAAuCwF,KAAvCxF,EAA8C6D,SAA9C7D,CAAAA;QACA,MAAMwF,KAAN;MACD;MAED,IAAIxL,OAAO,CAACC,GAARD,CAAYgF,yBAAhB,EAA2C;QACzC,IAAID,uBAAuB,IAAI,MAAA,IAAUsD,OAAzC,EAAkD;UAChDpD,MAAM,CAACmH,QAAPnH,CAAiBoD,OAAD,CAAiBE,IAAjCtD,EAAwCoD,OAAD,CAAiBI,IAAxDxD,CAAAA;QACD;MACF;MAED,IAAIjF,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;QACnC,IAAI,IAAA,CAAKF,MAAT,EAAiB;UACfwL,QAAQ,CAACC,eAATD,CAAyBE,IAAzBF,GAAgC,IAAA,CAAKxL,MAArCwL;QACD;MACF;MACDrG,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,qBAAnBA,EAA0ClB,EAA1CkB,CAAAA;MAEA,OAAO,IAAP;IACD,CAAC,QAAOtB,GAAP,EAAY;MACZ,IAAIA,GAAG,CAACnE,SAAR,EAAmB;QACjB,OAAO,KAAP;MACD;MACD,MAAMmE,GAAN;IACD;EACF;EAEDkD,WAAW,CACTuB,MADS,EAET3H,GAFS,EAGTsD,EAHS,EAITuD,OAA0B,GAAG,CAAA,CAJpB,EAKH;IACN,UAA2C;MACzC,IAAI,OAAOpD,MAAM,CAACC,OAAd,KAA0B,WAA9B,EAA2C;QACzCkG,OAAO,CAACI,KAARJ,CAAe,2CAAfA,CAAAA;QACA;MACD;MAED,IAAI,OAAOnG,MAAM,CAACC,OAAPD,CAAekE,MAAflE,CAAP,KAAkC,WAAtC,EAAmD;QACjDmG,OAAO,CAACI,KAARJ,CAAe,2BAA0BjC,MAAO,mBAAhDiC,CAAAA;QACA;MACD;IACF;IAED,IAAIjC,MAAM,KAAK,WAAXA,IAA0B,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,EAAA,CAAA,KAAarE,EAA3C,EAA+C;MAC7C,IAAA,CAAK+B,QAAL,GAAgBwB,OAAO,CAACS,OAAxB;MACA,MAAM,CAAC5D,OAAP,CAAeiE,MAAf,CAAA,CACE;QACE3H,GADF;QAEEsD,EAFF;QAGEuD,OAHF;QAIEO,GAAG,EAAE;MAJP,CADF;MAOE;MACA;MACA;MACA,EAVF,EAWE9D,EAXF,CAAA;IAaD;EACF;EAED,MAAM0H,oBAAN,CACE9H,GADF,EAEE7C,QAFF,EAGEK,KAHF,EAIE4C,EAJF,EAKE2H,aALF,EAM6B;IAC3B,IAAI/H,GAAG,CAACnE,SAAR,EAAmB;MACjB;MACA,MAAMmE,GAAN;IACD;IAED,IAAIH,eAAe,IAAIG,GAAnBH,IAA0BkI,aAA9B,EAA6C;MAC3CzG,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,kBAAnBA,EAAuCtB,GAAvCsB,EAA4ClB,EAA5CkB,CAAAA,CAEA;MACA;MACA;MACA;MAEA;MACAf,MAAM,CAAC+D,QAAP/D,CAAgBnB,IAAhBmB,GAAuBH,EAAvBG,CAEA;MACA;MACA,MAAM9E,sBAAsB,CAAA,CAA5B;IACD;IAED,IAAI;MACF,IAAIgH,SAAJ;MACA,IAAIG,WAAJ;MACA,IAAIC,KAAJ;MACA,MAAMmF,MAAM,GAAGhI,GAAG,CAACiI,OAAJjI,KAAgBS,wBAA/B;MAEA,IAAIuH,MAAJ,EAAY;QACV,IAAI;UACF,IAAIE,GAAJ;UACC,CAAC;YAAEC,IAAI,EAAE1F,SAAR;YAAmBG,WAAnB;YAAgCsF;UAAhC,CAAA,GAAwC,MAAM,IAAA,CAAKE,cAAL,CAC9C,MAD8C,CAA/C,EAID;UACA;UACA,IAAIF,GAAG,IAAIA,GAAG,CAACpF,OAAf,EAAwB;YACtBD,KAAK,GAAG,MAAM,IAAA,CAAKwF,cAAL,CACZ,IAAA,CAAKzG,UAAL,CAAgB0G,WAAhB,CAA4B,MAA5B,EAAoC,MAApC,EAA4C,IAA5C,EAAkD,IAAA,CAAKnM,MAAvD,CADY,CAAd0G;UAGD;QACF,CAAC,QAAO0F,IAAP,EAAa,CACb;QAAA;MAEH;MAED,IACE,OAAO9F,SAAP,KAAsB,WAAtB,IACA,OAAOG,WAAP,KAAwB,WAF1B,EAGE;QACA;QAAC,CAAC;UAAEuF,IAAI,EAAE1F,SAAR;UAAmBG;QAAnB,CAAA,GAAmC,MAAM,IAAA,CAAKwF,cAAL,CACzC,SADyC,CAA1C;MAGF;MAED,MAAMxB,SAA2B,GAAG;QAClC/D,KADkC;QAElCJ,SAFkC;QAGlCG,WAHkC;QAIlC5C,GAAG,EAAEgI,MAAM,GAAGQ,SAAH,GAAexI,GAJQ;QAKlC8G,KAAK,EAAEkB,MAAM,GAAGQ,SAAH,GAAexI;MALM,CAApC;MAQA,IAAI,CAAC4G,SAAS,CAAC/D,KAAf,EAAsB;QACpB,IAAI;UACF+D,SAAS,CAAC/D,KAAV+D,GAAkB,MAAM,IAAA,CAAKW,eAAL,CAAqB9E,SAArB,EAAgC;YACtDzC,GADsD;YAEtD7C,QAFsD;YAGtDK;UAHsD,CAAhC,CAAxBoJ;QAKD,CAAC,QAAO6B,MAAP,EAAe;UACf/B,OAAO,CAACI,KAARJ,CAAc,yCAAdA,EAAyD+B,MAAzD/B,CAAAA;UACAE,SAAS,CAAC/D,KAAV+D,GAAkB,CAAA,CAAlBA;QACD;MACF;MAED,OAAOA,SAAP;IACD,CAAC,QAAO8B,YAAP,EAAqB;MACrB,OAAO,IAAA,CAAKZ,oBAAL,CAA0BY,YAA1B,EAAwCvL,QAAxC,EAAkDK,KAAlD,EAAyD4C,EAAzD,EAA6D,IAA7D,CAAP;IACD;EACF;EAED,MAAMyG,YAAN,CACEvJ,KADF,EAEEH,QAFF,EAGEK,KAHF,EAIE4C,EAJF,EAKEgE,OAAgB,GAAG,KALrB,EAM6B;IAC3B,IAAI;MACF,MAAMuE,eAAe,GAAG,IAAA,CAAKnH,UAAL,CAAgBlE,KAAhB,CAAxB;MAEA,IAAI8G,OAAO,IAAIuE,eAAXvE,IAA8B,IAAA,CAAK9G,KAAL,KAAeA,KAAjD,EAAwD;QACtD,OAAOqL,eAAP;MACD;MAED,MAAM/B,SAA2B,GAAG+B,eAAe,GAC/CA,eAD+C,GAE/C,MAAM,IAAA,CAAKP,cAAL,CAAoB9K,KAApB,CAAA,CAA2BuD,IAA3B,CAAiCC,GAAD,KAAU;QAC9C2B,SAAS,EAAE3B,GAAG,CAACqH,IAD+B;QAE9CvF,WAAW,EAAE9B,GAAG,CAAC8B,WAF6B;QAG9CE,OAAO,EAAEhC,GAAG,CAACoH,GAAJpH,CAAQgC,OAH6B;QAI9CC,OAAO,EAAEjC,GAAG,CAACoH,GAAJpH,CAAQiC;MAJ6B,CAAV,CAAhC,CAFV;MASA,MAAM;QAAEN,SAAF;QAAaK,OAAb;QAAsBC;MAAtB,CAAA,GAAkC6D,SAAxC;MAEA,UAA2C;QACzC,MAAM;UAAEgC;QAAF,CAAA,GAAyBjE,OAAO,CAAC,UAAD,CAAtC;QACA,IAAI,CAACiE,kBAAkB,CAACnG,SAAD,CAAvB,EAAoC;UAClC,MAAM,IAAI7G,KAAJ,CACH,yDAAwDuB,QAAS,GAD9D,CAAN;QAGD;MACF;MAED,IAAIgE,QAAJ;MAEA,IAAI2B,OAAO,IAAIC,OAAf,EAAwB;QACtB5B,QAAQ,GAAG,IAAA,CAAKS,UAAL,CAAgB0G,WAAhB,CACT,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB;UAAEnL,QAAF;UAAYK;QAAZ,CAArB,CADS,EAETb,WAAW,CAACyD,EAAD,CAFF,EAGT0C,OAHS,EAIT,IAAA,CAAK3G,MAJI,CAAXgF;MAMD;MAED,MAAM0B,KAAK,GAAG,MAAM,IAAA,CAAKgG,QAAL,CAAgC,MAClD/F,OAAO,GACH,IAAA,CAAKuF,cAAL,CAAoBlH,QAApB,CADG,GAEH4B,OAAO,GACP,IAAA,CAAK+F,cAAL,CAAoB3H,QAApB,CADO,GAEP,IAAA,CAAKoG,eAAL,CACE9E,SADF;MAEE;MACA;QACEtF,QADF;QAEEK,KAFF;QAGE+D,MAAM,EAAEnB;MAHV,CAHF,CALc,CAApB;MAgBAwG,SAAS,CAAC/D,KAAV+D,GAAkB/D,KAAlB+D;MACA,IAAA,CAAKpF,UAAL,CAAgBlE,KAAhB,CAAA,GAAyBsJ,SAAzB;MACA,OAAOA,SAAP;IACD,CAAC,QAAO5G,GAAP,EAAY;MACZ,OAAO,IAAA,CAAK8H,oBAAL,CAA0B9H,GAA1B,EAA+B7C,QAA/B,EAAyCK,KAAzC,EAAgD4C,EAAhD,CAAP;IACD;EACF;EAEDqH,GAAG,CACDnK,KADC,EAEDH,QAFC,EAGDK,KAHC,EAID4C,EAJC,EAKD2I,IALC,EAMc;IACf,IAAA,CAAK9G,UAAL,GAAkB,KAAlB;IAEA,IAAA,CAAK3E,KAAL,GAAaA,KAAb;IACA,IAAA,CAAKH,QAAL,GAAgBA,QAAhB;IACA,IAAA,CAAKK,KAAL,GAAaA,KAAb;IACA,IAAA,CAAK+D,MAAL,GAAcnB,EAAd;IACA,OAAO,IAAA,CAAKmF,MAAL,CAAYwD,IAAZ,CAAP;EACD,CAED;;;;EAIAC,cAAc,CAACC,EAAD,EAA6B;IACzC,IAAA,CAAKpH,IAAL,GAAYoH,EAAZ;EACD;EAED7D,eAAe,CAAChF,EAAD,EAAsB;IACnC,IAAI,CAAC,IAAA,CAAKmB,MAAV,EAAkB,OAAO,KAAP;IAClB,MAAM,CAAC2H,YAAD,EAAeC,OAAf,CAAA,GAA0B,IAAA,CAAK5H,MAAL,CAAY6H,KAAZ,CAAkB,GAAlB,CAAhC;IACA,MAAM,CAACC,YAAD,EAAeC,OAAf,CAAA,GAA0BlJ,EAAE,CAACgJ,KAAHhJ,CAAS,GAATA,CAAhC,CAEA;IACA,IAAIkJ,OAAO,IAAIJ,YAAY,KAAKG,YAA5BC,IAA4CH,OAAO,KAAKG,OAA5D,EAAqE;MACnE,OAAO,IAAP;IACD,CAED;IACA,IAAIJ,YAAY,KAAKG,YAArB,EAAmC;MACjC,OAAO,KAAP;IACD,CAED;IACA;IACA;IACA;IACA,OAAOF,OAAO,KAAKG,OAAnB;EACD;EAEDhE,YAAY,CAAClF,EAAD,EAAmB;IAC7B,MAAM,GAAGT,IAAH,CAAA,GAAWS,EAAE,CAACgJ,KAAHhJ,CAAS,GAATA,CAAjB,CACA;IACA,IAAIT,IAAI,KAAK,EAAb,EAAiB;MACfY,MAAM,CAACmH,QAAPnH,CAAgB,CAAhBA,EAAmB,CAAnBA,CAAAA;MACA;IACD,CAED;IACA,MAAMgJ,IAAI,GAAG5B,QAAQ,CAAC6B,cAAT7B,CAAwBhI,IAAxBgI,CAAb;IACA,IAAI4B,IAAJ,EAAU;MACRA,IAAI,CAACE,cAALF,CAAAA,CAAAA;MACA;IACD,CACD;IACA;IACA,MAAMG,MAAM,GAAG/B,QAAQ,CAACgC,iBAAThC,CAA2BhI,IAA3BgI,CAAAA,CAAiC,CAAjCA,CAAf;IACA,IAAI+B,MAAJ,EAAY;MACVA,MAAM,CAACD,cAAPC,CAAAA,CAAAA;IACD;EACF;EAED3D,QAAQ,CAACxE,MAAD,EAA0B;IAChC,OAAO,IAAA,CAAKA,MAAL,KAAgBA,MAAvB;EACD;EAEDuE,YAAY,CAACoB,UAAD,EAAwB1B,KAAxB,EAAyCoE,aAAa,GAAG,IAAzD,EAA+D;IACzE,MAAM;MAAEzM;IAAF,CAAA,GAAe+J,UAArB;IACA,MAAM2C,aAAa,GAAG,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EACpB,CAAA,CAAA,EAAA,oBAAA,CAAA,mBAAA,EAAoBD,aAAa,GAAGjN,WAAW,CAACQ,QAAD,CAAd,GAA4BA,QAA7D,CADoB,CAAtB;IAIA,IAAI0M,aAAa,KAAK,MAAlBA,IAA4BA,aAAa,KAAK,SAAlD,EAA6D;MAC3D,OAAO3C,UAAP;IACD,CAED;IACA,IAAI,CAAC1B,KAAK,CAACvG,QAANuG,CAAeqE,aAAfrE,CAAL,EAAqC;MACnC;MACAA,KAAK,CAACsE,IAANtE,CAAY2C,IAAD,IAAU;QACnB,IACE,CAAA,CAAA,EAAA,UAAA,CAAA,cAAA,EAAeA,IAAf,CAAA,IACA,CAAA,CAAA,EAAA,WAAA,CAAA,aAAA,EAAcA,IAAd,CAAA,CAAoB4B,EAApB,CAAuBC,IAAvB,CAA4BH,aAA5B,CAFF,EAGE;UACA3C,UAAU,CAAC/J,QAAX+J,GAAsB0C,aAAa,GAAGlN,WAAW,CAACyL,IAAD,CAAd,GAAuBA,IAA1DjB;UACA,OAAO,IAAP;QACD;MACF,CARD1B,CAAAA;IASD;IACD,OAAO0B,UAAP;EACD,CAED;;;;;;EAMA,MAAM+C,QAAN,CACEnN,GADF,EAEEyE,MAAc,GAAGzE,GAFnB,EAGE6G,OAAwB,GAAG,CAAA,CAH7B,EAIiB;IACf,IAAIkC,MAAM,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiB/I,GAAjB,CAAb;IAEA,IAAI;MAAEK;IAAF,CAAA,GAAe0I,MAAnB;IAEA,IAAIvK,OAAO,CAACC,GAARD,CAAYe,mBAAhB,EAAqC;MACnC,MAAMqI,mBAAmB,GAAGC,OAAO,CAAC,+BAAD,CAAPA,CACzBD,mBADH;MAGA,IAAIf,OAAO,CAACxH,MAARwH,KAAmB,KAAvB,EAA8B;QAC5BxG,QAAQ,GAAGuH,mBAAmB,CAAEvH,QAAF,EAAY,IAAA,CAAKiF,OAAjB,CAAnBsC,CAA6CvH,QAAxDA;QACA0I,MAAM,CAAC1I,QAAP0I,GAAkB1I,QAAlB0I;QACA/I,GAAG,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB+I,MAArB,CAAN/I;QAEA,IAAIsJ,QAAQ,GAAG,CAAA,CAAA,EAAA,iBAAA,CAAA,gBAAA,EAAiB7E,MAAjB,CAAf;QACA,MAAMqD,gBAAgB,GAAGF,mBAAmB,CAC1C0B,QAAQ,CAACjJ,QADiC,EAE1C,IAAA,CAAKiF,OAFqC,CAA5C;QAIAgE,QAAQ,CAACjJ,QAATiJ,GAAoBxB,gBAAgB,CAACzH,QAArCiJ;QACAzC,OAAO,CAACxH,MAARwH,GAAiBiB,gBAAgB,CAACC,cAAjBD,IAAmCjB,OAAO,CAACxH,MAA5DwH;QACApC,MAAM,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB6E,QAArB,CAAT7E;MACD;IACF;IAED,MAAMiE,KAAK,GAAG,MAAM,IAAA,CAAK5D,UAAL,CAAgB6D,WAAhB,CAAA,CAApB;IAEAI,MAAM,GAAG,IAAA,CAAKC,YAAL,CAAkBD,MAAlB,EAA0BL,KAA1B,CAATK;IAEA,IAAIA,MAAM,CAAC1I,QAAP0I,KAAoB1I,QAAxB,EAAkC;MAChCA,QAAQ,GAAG0I,MAAM,CAAC1I,QAAlBA;MACAL,GAAG,GAAG,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,EAAqB+I,MAArB,CAAN/I;IACD,CAED;IACA,UAA2C;MACzC;IACD;IAED,MAAMQ,KAAK,GAAG,CAAA,CAAA,EAAA,uBAAA,CAAA,uBAAA,EAAwBH,QAAxB,CAAd;IACA,MAAMgK,OAAO,CAAC+C,GAAR/C,CAAY,CAChB,IAAA,CAAKvF,UAAL,CAAgBuI,YAAhB,CACErN,GADF,EAEEyE,MAFF,EAGE,OAAOoC,OAAO,CAACxH,MAAf,KAA0B,WAA1B,GAAwCwH,OAAO,CAACxH,MAAhD,GAAyD,IAAA,CAAKA,MAHhE,EAIE,IAAA,CAAKC,aAJP,CADgB,EAOhB,IAAA,CAAKwF,UAAL,CAAgB+B,OAAO,CAACyG,QAARzG,GAAmB,UAAnBA,GAAgC,UAAhD,CAAA,CAA4DrG,KAA5D,CAPgB,CAAZ6J,CAAN;EASD;EAED,MAAMiB,cAAN,CAAqB9K,KAArB,EAA4D;IAC1D,IAAIzB,SAAS,GAAG,KAAhB;IACA,MAAMwO,MAAM,GAAI,IAAA,CAAK1I,GAAL,GAAW,MAAM;MAC/B9F,SAAS,GAAG,IAAZA;IACD,CAFD;IAIA,MAAMyO,eAAe,GAAG,MAAM,IAAA,CAAK1I,UAAL,CAAgB2I,QAAhB,CAAyBjN,KAAzB,CAA9B;IAEA,IAAIzB,SAAJ,EAAe;MACb,MAAMiL,KAAU,GAAG,IAAIlL,KAAJ,CAChB,wCAAuC0B,KAAM,GAD7B,CAAnB;MAGAwJ,KAAK,CAACjL,SAANiL,GAAkB,IAAlBA;MACA,MAAMA,KAAN;IACD;IAED,IAAIuD,MAAM,KAAK,IAAA,CAAK1I,GAApB,EAAyB;MACvB,IAAA,CAAKA,GAAL,GAAW,IAAX;IACD;IAED,OAAO2I,eAAP;EACD;EAEDzB,QAAQ,CAAI2B,EAAJ,EAAsC;IAC5C,IAAI3O,SAAS,GAAG,KAAhB;IACA,MAAMwO,MAAM,GAAG,CAAA,KAAM;MACnBxO,SAAS,GAAG,IAAZA;IACD,CAFD;IAGA,IAAA,CAAK8F,GAAL,GAAW0I,MAAX;IACA,OAAOG,EAAE,CAAA,CAAA,CAAG3J,IAAL2J,CAAWzB,IAAD,IAAU;MACzB,IAAIsB,MAAM,KAAK,IAAA,CAAK1I,GAApB,EAAyB;QACvB,IAAA,CAAKA,GAAL,GAAW,IAAX;MACD;MAED,IAAI9F,SAAJ,EAAe;QACb,MAAMmE,GAAQ,GAAG,IAAIpE,KAAJ,CAAU,iCAAV,CAAjB;QACAoE,GAAG,CAACnE,SAAJmE,GAAgB,IAAhBA;QACA,MAAMA,GAAN;MACD;MAED,OAAO+I,IAAP;IACD,CAZMyB,CAAP;EAaD;EAEDnC,cAAc,CAAClH,QAAD,EAAoC;IAChD,MAAM;MAAE/B,IAAI,EAAEqL;IAAR,CAAA,GAAqB,IAAIxN,GAAJ,CAAQkE,QAAR,EAAkBZ,MAAM,CAAC+D,QAAP/D,CAAgBnB,IAAlC,CAA3B;IACA,IAAI9D,SAAyC,IAAA,CAAKmG,GAAL,CAASgJ,QAAT,CAA7C,EAAiE;MAC/D,OAAOtD,OAAO,CAACuD,OAARvD,CAAgB,IAAA,CAAK1F,GAAL,CAASgJ,QAAT,CAAhBtD,CAAP;IACD;IACD,OAAOjG,aAAa,CAACC,QAAD,EAAW,IAAA,CAAKa,KAAhB,CAAbd,CAAoCL,IAApCK,CAA0C6H,IAAD,IAAU;MACxD,IAAA,CAAKtH,GAAL,CAASgJ,QAAT,CAAA,GAAqB1B,IAArB;MACA,OAAOA,IAAP;IACD,CAHM7H,CAAP;EAID;EAED4H,cAAc,CAAC3H,QAAD,EAAoC;IAChD,OAAOD,aAAa,CAACC,QAAD,EAAW,IAAA,CAAKa,KAAhB,CAApB;EACD;EAEDuF,eAAe,CACb9E,SADa,EAEbkI,GAFa,EAGC;IACd,MAAM;MAAElI,SAAS,EAAEF;IAAb,CAAA,GAAqB,IAAA,CAAKf,UAAL,CAAgB,OAAhB,CAA3B;IACA,MAAMoJ,OAAO,GAAG,IAAA,CAAK7I,QAAL,CAAcQ,GAAd,CAAhB;IACAoI,GAAG,CAACC,OAAJD,GAAcC,OAAdD;IACA,OAAO,CAAA,CAAA,EAAA,MAAA,CAAA,mBAAA,EAA4CpI,GAA5C,EAAiD;MACtDqI,OADsD;MAEtDnI,SAFsD;MAGtDtC,MAAM,EAAE,IAH8C;MAItDwK;IAJsD,CAAjD,CAAP;EAMD;EAEDzF,kBAAkB,CAAC9E,EAAD,EAAmB;IACnC,IAAI,IAAA,CAAKuB,GAAT,EAAc;MACZL,MAAM,CAACQ,MAAPR,CAAc+D,IAAd/D,CAAmB,kBAAnBA,EAAuC7F,sBAAsB,CAAA,CAA7D6F,EAAiElB,EAAjEkB,CAAAA;MACA,IAAA,CAAKK,GAAL,CAAA,CAAA;MACA,IAAA,CAAKA,GAAL,GAAW,IAAX;IACD;EACF;EAED4D,MAAM,CAACwD,IAAD,EAAwC;IAC5C,OAAO,IAAA,CAAKrH,GAAL,CAASqH,IAAT,EAAe,IAAA,CAAKvH,UAAL,CAAgB,OAAhB,CAAA,CAAyBiB,SAAxC,CAAP;EACD;AAn8B+C;;AAA7BnB,M,CA2BZQ,M,GAAsB,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,EAAA,C","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport { denormalizePagePath } from '../../server/denormalize-page-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\nimport escapePathDelimiters from './utils/escape-path-delimiters'\n\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState = null | { __N: false } | ({ __N: true } & NextHistoryState)\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nfunction addPathPrefix(path: string, prefix?: string) {\n  return prefix && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(prefix)\n      : `${prefix}${path}`\n    : path\n}\n\nexport function addLocale(\n  path: string,\n  locale?: string | false,\n  defaultLocale?: string\n) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale &&\n      locale !== defaultLocale &&\n      !path.startsWith('/' + locale + '/') &&\n      path !== '/' + locale\n      ? addPathPrefix(path, '/' + locale)\n      : path\n  }\n  return path\n}\n\nexport function delLocale(path: string, locale?: string) {\n  if (process.env.__NEXT_I18N_SUPPORT) {\n    return locale &&\n      (path.startsWith('/' + locale + '/') || path === '/' + locale)\n      ? path.substr(locale.length + 1) || '/'\n      : path\n  }\n  return path\n}\n\nexport function hasBasePath(path: string): boolean {\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return addPathPrefix(path, basePath)\n}\n\nexport function delBasePath(path: string): string {\n  return path.slice(basePath.length) || '/'\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  if (url.startsWith('/')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\nexport function interpolateAs(\n  route: string,\n  asPathname: string,\n  query: ParsedUrlQuery\n) {\n  let interpolatedRoute = ''\n\n  const dynamicRegex = getRouteRegex(route)\n  const dynamicGroups = dynamicRegex.groups\n  const dynamicMatches =\n    // Try to match the dynamic route against the asPath\n    (asPathname !== route ? getRouteMatcher(dynamicRegex)(asPathname) : '') ||\n    // Fall back to reading the values from the href\n    // TODO: should this take priority; also need to change in the router.\n    query\n\n  interpolatedRoute = route\n  const params = Object.keys(dynamicGroups)\n\n  if (\n    !params.every((param) => {\n      let value = dynamicMatches[param] || ''\n      const { repeat, optional } = dynamicGroups[param]\n\n      // support single-level catch-all\n      // TODO: more robust handling for user-error (passing `/`)\n      let replaced = `[${repeat ? '...' : ''}${param}]`\n      if (optional) {\n        replaced = `${!value ? '/' : ''}[${replaced}]`\n      }\n      if (repeat && !Array.isArray(value)) value = [value]\n\n      return (\n        (optional || param in dynamicMatches) &&\n        // Interpolate group into data URL if present\n        (interpolatedRoute =\n          interpolatedRoute!.replace(\n            replaced,\n            repeat\n              ? (value as string[]).map(escapePathDelimiters).join('/')\n              : escapePathDelimiters(value as string)\n          ) || '/')\n      )\n    })\n  ) {\n    interpolatedRoute = '' // did not satisfy all requirements\n\n    // n.b. We ignore this error because we handle warning for this case in\n    // development in the `<Link>` component directly.\n  }\n  return {\n    params,\n    result: interpolatedRoute,\n  }\n}\n\nfunction omitParmsFromQuery(query: ParsedUrlQuery, params: string[]) {\n  const filteredQuery: ParsedUrlQuery = {}\n\n  Object.keys(query).forEach((key) => {\n    if (!params.includes(key)) {\n      filteredQuery[key] = query[key]\n    }\n  })\n  return filteredQuery\n}\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(\n  currentPath: string,\n  href: Url,\n  resolveAs?: boolean\n): string {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n')\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    let interpolatedAs = ''\n\n    if (\n      isDynamicRoute(finalUrl.pathname) &&\n      finalUrl.searchParams &&\n      resolveAs\n    ) {\n      const query = searchParamsToUrlQuery(finalUrl.searchParams)\n\n      const { result, params } = interpolateAs(\n        finalUrl.pathname,\n        finalUrl.pathname,\n        query\n      )\n\n      if (result) {\n        interpolatedAs = formatWithValidation({\n          pathname: result,\n          hash: finalUrl.hash,\n          query: omitParmsFromQuery(query, params),\n        })\n      }\n    }\n\n    // if the origin didn't change, it means we received a relative href\n    const resolvedHref =\n      finalUrl.origin === base.origin\n        ? finalUrl.href.slice(finalUrl.origin.length)\n        : finalUrl.href\n\n    return (resolveAs\n      ? [resolvedHref, interpolatedAs || resolvedHref]\n      : resolvedHref) as string\n  } catch (_) {\n    return (resolveAs ? [urlAsString] : urlAsString) as string\n  }\n}\n\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR')\nexport function markLoadingError(err: Error): Error {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {})\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as,\n  }\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n  locale?: string | false\n}\n\nexport type PrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<PrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (data: PrivateRouteInfo, App: AppComponent) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history\n\nconst SSG_DATA_NOT_FOUND_ERROR = 'SSG Data NOT_FOUND'\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      if (res.status === 404) {\n        // TODO: handle reloading in development from fallback returning 200\n        // to on-demand-entry-handler causing it to reload periodically\n        throw new Error(SSG_DATA_NOT_FOUND_ERROR)\n      }\n      throw new Error(`Failed to load static props`)\n    }\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n\n    if (!isServerRender) {\n      markLoadingError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      initialStyleSheets,\n      err,\n      subscription,\n      isFallback,\n      locale,\n      locales,\n      defaultLocale,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      initialStyleSheets: StyleSheetTuple[]\n      App: AppComponent\n      wrapApp: (App: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n      locale?: string\n      locales?: string[]\n      defaultLocale?: string\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n      // @ts-ignore this is temporarily global (attached to window)\n      isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = locale\n      this.locales = locales\n      this.defaultLocale = defaultLocale\n    }\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL()\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n\n          let scrollDebounceTimeout: undefined | NodeJS.Timeout\n\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout)\n\n            scrollDebounceTimeout = setTimeout(() => {\n              const { url, as: curAs, options } = history.state\n              this.changeState(\n                'replaceState',\n                url,\n                curAs,\n                Object.assign({}, options, {\n                  _N_X: window.scrollX,\n                  _N_Y: window.scrollY,\n                })\n              )\n            }, 10)\n          }\n\n          window.addEventListener('scroll', debouncedScrollSave)\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    const { url, as, options } = state\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n        locale: options.locale || this.defaultLocale,\n      })\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      this.locale = options.locale || this.locale\n\n      if (typeof options.locale === 'undefined') {\n        options.locale = this.locale\n      }\n\n      const {\n        normalizeLocalePath,\n      } = require('../i18n/normalize-locale-path') as typeof import('../i18n/normalize-locale-path')\n\n      const localePathResult = normalizeLocalePath(as, this.locales)\n\n      if (localePathResult.detectedLocale) {\n        this.locale = localePathResult.detectedLocale\n        url = localePathResult.pathname\n      }\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute)\n    }\n\n    as = addLocale(as, options.locale, this.defaultLocale)\n    const cleanedAs = delLocale(\n      hasBasePath(as) ? delBasePath(as) : as,\n      this.locale\n    )\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route])\n      Router.events.emit('hashChangeComplete', as)\n      return true\n    }\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    const pages = await this.pageLoader.getPageList()\n    const { __rewrites: rewrites } = await this.pageLoader.promisedBuildManifest\n\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname, query } = parsed\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState'\n    }\n\n    let route = removePathTrailingSlash(pathname)\n    const { shallow = false } = options\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = resolveRewrites(\n        parseRelativeUrl(as).pathname,\n        pages,\n        basePath,\n        rewrites,\n        query,\n        (p: string) => this._resolveHref({ pathname: p }, pages).pathname!\n      )\n\n      if (resolvedAs !== as) {\n        const potentialHref = removePathTrailingSlash(\n          this._resolveHref(\n            Object.assign({}, parsed, { pathname: resolvedAs }),\n            pages,\n            false\n          ).pathname!\n        )\n\n        // if this directly matches a page we need to update the href to\n        // allow the correct page chunk to be loaded\n        if (pages.includes(potentialHref)) {\n          route = potentialHref\n          pathname = potentialHref\n          parsed.pathname = pathname\n          url = formatWithValidation(parsed)\n        }\n      }\n    }\n    resolvedAs = delLocale(delBasePath(resolvedAs), this.locale)\n\n    if (isDynamicRoute(route)) {\n      const parsedAs = parseRelativeUrl(resolvedAs)\n      const asPathname = parsedAs.pathname\n\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      const shouldInterpolate = route === asPathname\n      const interpolatedAs = shouldInterpolate\n        ? interpolateAs(route, asPathname, query)\n        : ({} as { result: undefined; params: undefined })\n\n      if (!routeMatch || (shouldInterpolate && !interpolatedAs.result)) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `${\n                shouldInterpolate\n                  ? `Interpolating href`\n                  : `Mismatching \\`as\\` and \\`href\\``\n              } failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            (shouldInterpolate\n              ? `The provided \\`href\\` (${url}) value is missing query values (${missingParams.join(\n                  ', '\n                )}) to be interpolated properly. `\n              : `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). `) +\n              `Read more: https://err.sh/vercel/next.js/${\n                shouldInterpolate\n                  ? 'href-interpolation-failed'\n                  : 'incompatible-href-as'\n              }`\n          )\n        }\n      } else if (shouldInterpolate) {\n        as = formatWithValidation(\n          Object.assign({}, parsedAs, {\n            pathname: interpolatedAs.result,\n            query: omitParmsFromQuery(query, interpolatedAs.params!),\n          })\n        )\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as)\n\n    try {\n      const routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        shallow\n      )\n      let { error, props, __N_SSG, __N_SSP } = routeInfo\n\n      // handle redirect on client-transition\n      if (\n        (__N_SSG || __N_SSP) &&\n        props &&\n        (props as any).pageProps &&\n        (props as any).pageProps.__N_REDIRECT\n      ) {\n        const destination = (props as any).pageProps.__N_REDIRECT\n\n        // check if destination is internal (resolves to a page) and attempt\n        // client-navigation if it is falling back to hard navigation if\n        // it's not\n        if (destination.startsWith('/')) {\n          const parsedHref = parseRelativeUrl(destination)\n          this._resolveHref(parsedHref, pages)\n\n          if (pages.includes(parsedHref.pathname)) {\n            return this.change(method, destination, destination, options)\n          }\n        }\n\n        window.location.href = destination\n        return new Promise(() => {})\n      }\n\n      Router.events.emit('beforeHistoryChange', as)\n      this.changeState(\n        method,\n        url,\n        addLocale(as, options.locale, this.defaultLocale),\n        options\n      )\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      await this.set(route, pathname!, query, cleanedAs, routeInfo).catch(\n        (e) => {\n          if (e.cancelled) error = error || e\n          else throw e\n        }\n      )\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs)\n        throw error\n      }\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo((options as any)._N_X, (options as any)._N_Y)\n        }\n      }\n\n      if (process.env.__NEXT_I18N_SUPPORT) {\n        if (this.locale) {\n          document.documentElement.lang = this.locale\n        }\n      }\n      Router.events.emit('routeChangeComplete', as)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    loadErrorFail?: boolean\n  ): Promise<PrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      let Component: ComponentType\n      let styleSheets: StyleSheetTuple[]\n      let props: Record<string, any> | undefined\n      const ssg404 = err.message === SSG_DATA_NOT_FOUND_ERROR\n\n      if (ssg404) {\n        try {\n          let mod: any\n          ;({ page: Component, styleSheets, mod } = await this.fetchComponent(\n            '/404'\n          ))\n\n          // TODO: should we tolerate these props missing and still render the\n          // page instead of falling back to _error?\n          if (mod && mod.__N_SSG) {\n            props = await this._getStaticData(\n              this.pageLoader.getDataHref('/404', '/404', true, this.locale)\n            )\n          }\n        } catch (_err) {\n          // non-fatal fallback to _error\n        }\n      }\n\n      if (\n        typeof Component! === 'undefined' ||\n        typeof styleSheets! === 'undefined'\n      ) {\n        ;({ page: Component, styleSheets } = await this.fetchComponent(\n          '/_error'\n        ))\n      }\n\n      const routeInfo: PrivateRouteInfo = {\n        props,\n        Component,\n        styleSheets,\n        err: ssg404 ? undefined : err,\n        error: ssg404 ? undefined : err,\n      }\n\n      if (!routeInfo.props) {\n        try {\n          routeInfo.props = await this.getInitialProps(Component, {\n            err,\n            pathname,\n            query,\n          } as any)\n        } catch (gipErr) {\n          console.error('Error in error page `getInitialProps`: ', gipErr)\n          routeInfo.props = {}\n        }\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true)\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    shallow: boolean = false\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const cachedRouteInfo = this.components[route]\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo\n      }\n\n      const routeInfo: PrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          delBasePath(as),\n          __N_SSG,\n          this.locale\n        )\n      }\n\n      const props = await this._getData<PrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n              } as any\n            )\n      )\n\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  _resolveHref(parsedHref: UrlObject, pages: string[], applyBasePath = true) {\n    const { pathname } = parsedHref\n    const cleanPathname = removePathTrailingSlash(\n      denormalizePagePath(applyBasePath ? delBasePath(pathname!) : pathname!)\n    )\n\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref\n    }\n\n    // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname!)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some((page) => {\n        if (\n          isDynamicRoute(page) &&\n          getRouteRegex(page).re.test(cleanPathname!)\n        ) {\n          parsedHref.pathname = applyBasePath ? addBasePath(page) : page\n          return true\n        }\n      })\n    }\n    return parsedHref\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    if (process.env.__NEXT_I18N_SUPPORT) {\n      const normalizeLocalePath = require('../i18n/normalize-locale-path')\n        .normalizeLocalePath as typeof import('../i18n/normalize-locale-path').normalizeLocalePath\n\n      if (options.locale === false) {\n        pathname = normalizeLocalePath!(pathname, this.locales).pathname\n        parsed.pathname = pathname\n        url = formatWithValidation(parsed)\n\n        let parsedAs = parseRelativeUrl(asPath)\n        const localePathResult = normalizeLocalePath!(\n          parsedAs.pathname,\n          this.locales\n        )\n        parsedAs.pathname = localePathResult.pathname\n        options.locale = localePathResult.detectedLocale || options.locale\n        asPath = formatWithValidation(parsedAs)\n      }\n    }\n\n    const pages = await this.pageLoader.getPageList()\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    await Promise.all([\n      this.pageLoader.prefetchData(\n        url,\n        asPath,\n        typeof options.locale !== 'undefined' ? options.locale : this.locale,\n        this.defaultLocale\n      ),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (process.env.NODE_ENV === 'production' && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    return fetchNextData(dataHref, this.isSsr)\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string): void {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as)\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(data: PrivateRouteInfo): Promise<void> {\n    return this.sub(data, this.components['/_app'].Component as AppComponent)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
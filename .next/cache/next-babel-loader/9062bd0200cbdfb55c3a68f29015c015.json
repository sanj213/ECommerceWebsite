{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\nvar _webVitals = require(\"web-vitals\");\nvar initialHref = location.href;\nvar isRegistered = false;\nvar userReportHandler;\nfunction onReport(metric) {\n  if (userReportHandler) {\n    userReportHandler(metric);\n  } // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n  if (false &&\n  // This field is empty unless you explicitly configure it:\n  process.env.__NEXT_ANALYTICS_ID) {\n    var body = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed: 'connection' in navigator && navigator['connection'] && 'effectiveType' in navigator['connection'] ? navigator['connection']['effectiveType'] : ''\n    };\n    var blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded'\n    });\n    var vitalsUrl = 'https://vitals.vercel-analytics.com/v1/vitals';\n    navigator.sendBeacon && navigator.sendBeacon(vitalsUrl, blob) || fetch(vitalsUrl, {\n      body: blob,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true\n    });\n  }\n}\nvar _default = function _default(onPerfEntry) {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry; // Only register listeners once:\n  if (isRegistered) {\n    return;\n  }\n  isRegistered = true;\n  (0, _webVitals.getCLS)(onReport);\n  (0, _webVitals.getFID)(onReport);\n  (0, _webVitals.getFCP)(onReport);\n  (0, _webVitals.getLCP)(onReport);\n  (0, _webVitals.getTTFB)(onReport);\n};\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../client/performance-relayer.ts"],"names":["initialHref","location","href","isRegistered","userReportHandler","onReport","metric","process","env","__NEXT_ANALYTICS_ID","body","dsn","id","page","window","__NEXT_DATA__","event_name","name","value","toString","speed","navigator","blob","Blob","URLSearchParams","type","vitalsUrl","sendBeacon","fetch","method","credentials","keepalive","onPerfEntry"],"mappings":";;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAUA,IAAMA,WAAW,GAAGC,QAAQ,CAACC,IAA7B;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA,IAAIC,iBAAJ;AAEA,SAASC,QAAT,CAAkBC,MAAlB,EAAkC;EAChC,IAAIF,iBAAJ,EAAuB;IACrBA,iBAAiB,CAACE,MAAD,CAAjBF;EACD,CAED;EACA;EACA;EACA;EACA;EACA,IACEG;EACA;EACAA,OAAO,CAACC,GAARD,CAAYE,mBAHd,EAIE;IACA,IAAMC,IAA4B,GAAG;MACnCC,GAAG,EAAEJ,OAAO,CAACC,GAARD,CAAYE,mBADkB;MAEnCG,EAAE,EAAEN,MAAM,CAACM,EAFwB;MAGnCC,IAAI,EAAEC,MAAM,CAACC,aAAPD,CAAqBD,IAHQ;MAInCX,IAAI,EAAEF,WAJ6B;MAKnCgB,UAAU,EAAEV,MAAM,CAACW,IALgB;MAMnCC,KAAK,EAAEZ,MAAM,CAACY,KAAPZ,CAAaa,QAAbb,CAAAA,CAN4B;MAOnCc,KAAK,EACH,YAAA,IAAgBC,SAAhB,IACAA,SAAS,CAAC,YAAD,CADT,IAEA,eAAA,IAAmBA,SAAS,CAAC,YAAD,CAF5B,GAGKA,SAAS,CAAC,YAAD,CAATA,CAAwB,eAAxBA,CAHL,GAII;IAZ6B,CAArC;IAeA,IAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,eAAJ,CAAoBd,IAApB,CAAA,CAA0BS,QAA1B,CAAA,CAAD,CAAT,EAAiD;MAC5D;MACAM,IAAI,EAAE;IAFsD,CAAjD,CAAb;IAIA,IAAMC,SAAS,GAAG,+CAAlB;IACEL,SAAS,CAACM,UAAVN,IAAwBA,SAAS,CAACM,UAAVN,CAAqBK,SAArBL,EAAgCC,IAAhCD,CAAzB,IACCO,KAAK,CAACF,SAAD,EAAY;MACfhB,IAAI,EAAEY,IADS;MAEfO,MAAM,EAAE,MAFO;MAGfC,WAAW,EAAE,MAHE;MAIfC,SAAS,EAAE;IAJI,CAAZ,CADN;EAOF;AACF;eAEeC,S,SAAAA,WAAD,EAAiC;EAC9C;EACA5B,iBAAiB,GAAG4B,WAApB5B,CAEA;EACA,IAAID,YAAJ,EAAkB;IAChB;EACD;EACDA,YAAY,GAAG,IAAfA;EAEA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAOE,QAAP,CAAA;EACA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAOA,QAAP,CAAA;EACA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAOA,QAAP,CAAA;EACA,CAAA,CAAA,EAAA,UAAA,CAAA,MAAA,EAAOA,QAAP,CAAA;EACA,CAAA,CAAA,EAAA,UAAA,CAAA,OAAA,EAAQA,QAAR,CAAA;AACD,C","sourcesContent":["import {\n  getCLS,\n  getFCP,\n  getFID,\n  getLCP,\n  getTTFB,\n  Metric,\n  ReportHandler,\n} from 'web-vitals'\n\nconst initialHref = location.href\nlet isRegistered = false\nlet userReportHandler: ReportHandler | undefined\n\nfunction onReport(metric: Metric) {\n  if (userReportHandler) {\n    userReportHandler(metric)\n  }\n\n  // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n  if (\n    process.env.NODE_ENV === 'production' &&\n    // This field is empty unless you explicitly configure it:\n    process.env.__NEXT_ANALYTICS_ID\n  ) {\n    const body: Record<string, string> = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed:\n        'connection' in navigator &&\n        navigator['connection'] &&\n        'effectiveType' in navigator['connection']\n          ? (navigator['connection']['effectiveType'] as string)\n          : '',\n    }\n\n    const blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded',\n    })\n    const vitalsUrl = 'https://vitals.vercel-analytics.com/v1/vitals'\n    ;(navigator.sendBeacon && navigator.sendBeacon(vitalsUrl, blob)) ||\n      fetch(vitalsUrl, {\n        body: blob,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      })\n  }\n}\n\nexport default (onPerfEntry?: ReportHandler) => {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry\n\n  // Only register listeners once:\n  if (isRegistered) {\n    return\n  }\n  isRegistered = true\n\n  getCLS(onReport)\n  getFID(onReport)\n  getFCP(onReport)\n  getLCP(onReport)\n  getTTFB(onReport)\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Users from '../../../models/userModel';\nimport bcrypt from 'bcryptjs';\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await login(req, res);\n      break;\n  }\n};\nconst login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      err: 'This user does not exist.'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      err: 'Incorrect password.'\n    });\n    const access_token = createAccessToken({\n      id: user._id\n    });\n    const refresh_token = createRefreshToken({\n      id: user._id\n    });\n    res.json({\n      msg: \"Login Success!\",\n      refresh_token,\n      access_token,\n      user: {\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        avatar: user.avatar,\n        root: user.root\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"names":["connectDB","Users","bcrypt","createAccessToken","createRefreshToken","req","res","method","login","email","password","body","user","findOne","status","json","err","isMatch","compare","access_token","id","_id","refresh_token","msg","name","role","avatar","root","message"],"sources":["/Users/sanjanaa/Documents/UrbanBasket/pages/api/auth/login.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Users from '../../../models/userModel'\nimport bcrypt from 'bcryptjs'\nimport { createAccessToken, createRefreshToken } from '../../../utils/generateToken'\n\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await login(req, res)\n            break;\n    }\n}\n\nconst login = async (req, res) => {\n    try{\n        const { email, password } = req.body\n\n        const user = await Users.findOne({ email })\n        if(!user) return res.status(400).json({err: 'This user does not exist.'})\n\n        const isMatch = await bcrypt.compare(password, user.password)\n        if(!isMatch) return res.status(400).json({err: 'Incorrect password.'})\n\n        const access_token = createAccessToken({id: user._id})\n        const refresh_token = createRefreshToken({id: user._id})\n        \n        res.json({\n            msg: \"Login Success!\",\n            refresh_token,\n            access_token,\n            user: {\n                name: user.name,\n                email: user.email,\n                role: user.role,\n                avatar: user.avatar,\n                root: user.root\n            }\n        })\n\n    }catch(err){\n        return res.status(500).json({err: err.message})\n    }\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,0BAA0B;AAChD,OAAOC,KAAK,MAAM,2BAA2B;AAC7C,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,8BAA8B;AAGpFJ,SAAS,CAAC,CAAC;AAEX,eAAe,OAAOK,GAAG,EAAEC,GAAG,KAAK;EAC/B,QAAOD,GAAG,CAACE,MAAM;IACb,KAAK,MAAM;MACP,MAAMC,KAAK,CAACH,GAAG,EAAEC,GAAG,CAAC;MACrB;EACR;AACJ,CAAC;AAED,MAAME,KAAK,GAAG,MAAAA,CAAOH,GAAG,EAAEC,GAAG,KAAK;EAC9B,IAAG;IACC,MAAM;MAAEG,KAAK;MAAEC;IAAS,CAAC,GAAGL,GAAG,CAACM,IAAI;IAEpC,MAAMC,IAAI,GAAG,MAAMX,KAAK,CAACY,OAAO,CAAC;MAAEJ;IAAM,CAAC,CAAC;IAC3C,IAAG,CAACG,IAAI,EAAE,OAAON,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAA2B,CAAC,CAAC;IAEzE,MAAMC,OAAO,GAAG,MAAMf,MAAM,CAACgB,OAAO,CAACR,QAAQ,EAAEE,IAAI,CAACF,QAAQ,CAAC;IAC7D,IAAG,CAACO,OAAO,EAAE,OAAOX,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAE;IAAqB,CAAC,CAAC;IAEtE,MAAMG,YAAY,GAAGhB,iBAAiB,CAAC;MAACiB,EAAE,EAAER,IAAI,CAACS;IAAG,CAAC,CAAC;IACtD,MAAMC,aAAa,GAAGlB,kBAAkB,CAAC;MAACgB,EAAE,EAAER,IAAI,CAACS;IAAG,CAAC,CAAC;IAExDf,GAAG,CAACS,IAAI,CAAC;MACLQ,GAAG,EAAE,gBAAgB;MACrBD,aAAa;MACbH,YAAY;MACZP,IAAI,EAAE;QACFY,IAAI,EAAEZ,IAAI,CAACY,IAAI;QACff,KAAK,EAAEG,IAAI,CAACH,KAAK;QACjBgB,IAAI,EAAEb,IAAI,CAACa,IAAI;QACfC,MAAM,EAAEd,IAAI,CAACc,MAAM;QACnBC,IAAI,EAAEf,IAAI,CAACe;MACf;IACJ,CAAC,CAAC;EAEN,CAAC,QAAMX,GAAG,EAAC;IACP,OAAOV,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACY;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
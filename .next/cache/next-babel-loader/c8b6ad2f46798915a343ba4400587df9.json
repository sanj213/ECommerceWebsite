{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { useEffect, useRef, useContext } from 'react';\nimport { patchData } from '../utils/fetchData';\nimport { DataContext } from '../store/GlobalState';\nimport { updateItem } from '../store/Actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PaypalBtn = ({\n  order,\n  onPaymentSuccess\n}) => {\n  const refPaypalBtn = useRef();\n  const {\n    state,\n    dispatch\n  } = useContext(DataContext);\n  const {\n    auth,\n    orders\n  } = state;\n  useEffect(() => {\n    paypal.Buttons({\n      createOrder: function (data, actions) {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              value: order.total\n            }\n          }]\n        });\n      },\n      onApprove: function (data, actions) {\n        dispatch({\n          type: 'NOTIFY',\n          payload: {\n            loading: true\n          }\n        });\n        return actions.order.capture().then(function (details) {\n          patchData(`order/payment/${order._id}`, {\n            paymentId: details.payer.payer_id\n          }, auth.token).then(res => {\n            if (res.err) return dispatch({\n              type: 'NOTIFY',\n              payload: {\n                error: res.err\n              }\n            });\n            dispatch(updateItem(orders, order._id, _objectSpread(_objectSpread({}, order), {}, {\n              paid: true,\n              dateOfPayment: details.create_time,\n              paymentId: details.payer.payer_id,\n              method: 'Paypal'\n            }), 'ADD_ORDERS'));\n            dispatch({\n              type: 'NOTIFY',\n              payload: {\n                success: res.msg\n              }\n            });\n\n            // Call the onPaymentSuccess callback\n            onPaymentSuccess();\n          });\n        });\n      }\n    }).render(refPaypalBtn.current);\n  }, []);\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: refPaypalBtn\n  });\n};\nexport default PaypalBtn;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await getProduct(req, res);\n      break;\n    case \"PUT\":\n      await updateProduct(req, res);\n      break;\n    case \"DELETE\":\n      await deleteProduct(req, res);\n      break;\n  }\n};\nconst getProduct = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query;\n    const product = await Products.findById(id);\n    if (!product) return res.status(400).json({\n      err: 'This product does not exist.'\n    });\n    res.json({\n      product\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst updateProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      title,\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    } = req.body;\n    if (!title || !price || !inStock || !description || !content || category === 'all' || images.length === 0) return res.status(400).json({\n      err: 'Please add all the fields.'\n    });\n    await Products.findOneAndUpdate({\n      _id: id\n    }, {\n      title: title.toLowerCase(),\n      price,\n      inStock,\n      description,\n      content,\n      category,\n      images\n    });\n    res.json({\n      msg: 'Success! Updated a product'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst deleteProduct = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin') return res.status(400).json({\n      err: 'Authentication is not valid.'\n    });\n    const {\n      id\n    } = req.query;\n    await Products.findByIdAndDelete(id);\n    res.json({\n      msg: 'Deleted a product.'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}
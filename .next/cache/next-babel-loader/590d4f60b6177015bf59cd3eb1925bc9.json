{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Orders from '../../../models/orderModel';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n      break;\n    case \"GET\":\n      await getOrders(req, res);\n      break;\n  }\n};\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n    if (result.role !== 'admin') {\n      orders = await Orders.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Orders.find().populate(\"user\", \"-password\");\n    }\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Orders({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    await newOrder.save();\n    res.json({\n      msg: 'Order success! We will contact you to confirm the order.',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n  await Products.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldSold\n  });\n};","map":{"version":3,"names":["connectDB","Orders","Products","auth","req","res","method","createOrder","getOrders","result","orders","role","find","user","id","populate","json","err","status","message","address","mobile","cart","total","body","newOrder","filter","item","sold","_id","quantity","inStock","save","msg","oldInStock","oldSold","findOneAndUpdate"],"sources":["/Users/sanjanaa/Documents/UrbanBasket/pages/api/order/index.js"],"sourcesContent":["import connectDB from '../../../utils/connectDB'\nimport Orders from '../../../models/orderModel'\nimport Products from '../../../models/productModel'\nimport auth from '../../../middleware/auth'\n\nconnectDB()\n\nexport default async (req, res) => {\n    switch(req.method){\n        case \"POST\":\n            await createOrder(req, res)\n            break;\n        case \"GET\":\n            await getOrders(req, res)\n            break;\n    }\n}\n\nconst getOrders = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n\n        let orders;\n        if(result.role !== 'admin'){\n            orders = await Orders.find({user: result.id}).populate(\"user\", \"-password\")\n        }else{\n            orders = await Orders.find().populate(\"user\", \"-password\")\n        }\n\n        res.json({orders})\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}\n\nconst createOrder = async (req, res) => {\n    try {\n        const result = await auth(req, res)\n        const { address, mobile, cart, total } = req.body\n\n        const newOrder = new Orders({\n            user: result.id, address, mobile, cart, total\n        })\n\n        cart.filter(item => {\n            return sold(item._id, item.quantity, item.inStock, item.sold)\n        })\n\n        await newOrder.save()\n\n        res.json({\n            msg: 'Order success! We will contact you to confirm the order.',\n            newOrder\n        })\n\n    } catch (err) {\n        return res.status(500).json({err: err.message})\n    }\n}\n\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n    await Products.findOneAndUpdate({_id: id}, {\n        inStock: oldInStock - quantity,\n        sold: quantity + oldSold\n    })\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,0BAA0B;AAChD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,IAAI,MAAM,0BAA0B;AAE3CH,SAAS,CAAC,CAAC;AAEX,eAAe,OAAOI,GAAG,EAAEC,GAAG,KAAK;EAC/B,QAAOD,GAAG,CAACE,MAAM;IACb,KAAK,MAAM;MACP,MAAMC,WAAW,CAACH,GAAG,EAAEC,GAAG,CAAC;MAC3B;IACJ,KAAK,KAAK;MACN,MAAMG,SAAS,CAACJ,GAAG,EAAEC,GAAG,CAAC;MACzB;EACR;AACJ,CAAC;AAED,MAAMG,SAAS,GAAG,MAAAA,CAAOJ,GAAG,EAAEC,GAAG,KAAK;EAClC,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAG,EAAEC,GAAG,CAAC;IAEnC,IAAIK,MAAM;IACV,IAAGD,MAAM,CAACE,IAAI,KAAK,OAAO,EAAC;MACvBD,MAAM,GAAG,MAAMT,MAAM,CAACW,IAAI,CAAC;QAACC,IAAI,EAAEJ,MAAM,CAACK;MAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC;IAC/E,CAAC,MAAI;MACDL,MAAM,GAAG,MAAMT,MAAM,CAACW,IAAI,CAAC,CAAC,CAACG,QAAQ,CAAC,MAAM,EAAE,WAAW,CAAC;IAC9D;IAEAV,GAAG,CAACW,IAAI,CAAC;MAACN;IAAM,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACV,OAAOZ,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACE;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC;AAED,MAAMZ,WAAW,GAAG,MAAAA,CAAOH,GAAG,EAAEC,GAAG,KAAK;EACpC,IAAI;IACA,MAAMI,MAAM,GAAG,MAAMN,IAAI,CAACC,GAAG,EAAEC,GAAG,CAAC;IACnC,MAAM;MAAEe,OAAO;MAAEC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGnB,GAAG,CAACoB,IAAI;IAEjD,MAAMC,QAAQ,GAAG,IAAIxB,MAAM,CAAC;MACxBY,IAAI,EAAEJ,MAAM,CAACK,EAAE;MAAEM,OAAO;MAAEC,MAAM;MAAEC,IAAI;MAAEC;IAC5C,CAAC,CAAC;IAEFD,IAAI,CAACI,MAAM,CAACC,IAAI,IAAI;MAChB,OAAOC,IAAI,CAACD,IAAI,CAACE,GAAG,EAAEF,IAAI,CAACG,QAAQ,EAAEH,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACC,IAAI,CAAC;IACjE,CAAC,CAAC;IAEF,MAAMH,QAAQ,CAACO,IAAI,CAAC,CAAC;IAErB3B,GAAG,CAACW,IAAI,CAAC;MACLiB,GAAG,EAAE,0DAA0D;MAC/DR;IACJ,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOR,GAAG,EAAE;IACV,OAAOZ,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAACC,GAAG,EAAEA,GAAG,CAACE;IAAO,CAAC,CAAC;EACnD;AACJ,CAAC;AAED,MAAMS,IAAI,GAAG,MAAAA,CAAOd,EAAE,EAAEgB,QAAQ,EAAEI,UAAU,EAAEC,OAAO,KAAK;EACtD,MAAMjC,QAAQ,CAACkC,gBAAgB,CAAC;IAACP,GAAG,EAAEf;EAAE,CAAC,EAAE;IACvCiB,OAAO,EAAEG,UAAU,GAAGJ,QAAQ;IAC9BF,IAAI,EAAEE,QAAQ,GAAGK;EACrB,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import connectDB from '../../../utils/connectDB';\nimport Orders from '../../../models/orderModel';\nimport Products from '../../../models/productModel';\nimport auth from '../../../middleware/auth';\nconnectDB();\nexport default async (req, res) => {\n  switch (req.method) {\n    case \"POST\":\n      await createOrder(req, res);\n      break;\n    case \"GET\":\n      await getOrders(req, res);\n      break;\n  }\n};\nconst getOrders = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    let orders;\n    if (result.role !== 'admin') {\n      orders = await Orders.find({\n        user: result.id\n      }).populate(\"user\", \"-password\");\n    } else {\n      orders = await Orders.find().populate(\"user\", \"-password\");\n    }\n    res.json({\n      orders\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst createOrder = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      address,\n      mobile,\n      cart,\n      total\n    } = req.body;\n    const newOrder = new Orders({\n      user: result.id,\n      address,\n      mobile,\n      cart,\n      total\n    });\n    cart.filter(item => {\n      return sold(item._id, item.quantity, item.inStock, item.sold);\n    });\n    await newOrder.save();\n    res.json({\n      msg: 'Order success! We will contact you to confirm the order.',\n      newOrder\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\nconst sold = async (id, quantity, oldInStock, oldSold) => {\n  await Products.findOneAndUpdate({\n    _id: id\n  }, {\n    inStock: oldInStock - quantity,\n    sold: quantity + oldSold\n  });\n};","map":null,"metadata":{},"sourceType":"module"}